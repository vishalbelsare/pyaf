<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uml="http://schema.omg.org/spec/UML/2.1">
  <xmi:Documentation exporter="umbrello uml modeller 2.37.3 (Applications 22.12.3) http://umbrello.kde.org" exporterVersion="2.0.4"/>
  <uml:Model xmi:id="m1" name="UML Model">
    <packagedElement xmi:type="uml:Stereotype" xmi:id="folder" name="folder"/>
    <packagedElement xmi:type="uml:Stereotype" xmi:id="dataType" name="dataType"/>
    <packagedElement xmi:type="uml:Stereotype" xmi:id="constructor" name="constructor"/>
    <packagedElement xmi:type="uml:Stereotype" xmi:id="class-or-package" name="class-or-package"/>
    <packagedElement xmi:type="uml:Model" xmi:id="Logical_View" name="Logical View">
      <uml:Package xmi:id="Datatypes" name="Datatypes" stereotype="folder">
        <packagedElement xmi:type="uml:DataType" xmi:id="uBWVrFo4ORVyf" name="array" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="uh1AyxHDFUOzR" name="bool" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="uqjnDIkTqdcTe" name="tuple" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="uqa3uwxnwFNgo" name="float" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="u3Yty9NZjxsm7" name="int" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="utuGpzqFrVHrK" name="list" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="u0NOTmaNFyAN1" name="long" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="ukzfUzfzsRCtg" name="dict" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="uKmHHEixnwXHw" name="object" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="ud5oTp6EPpmdn" name="set" stereotype="dataType"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="uVhzEYBjTlJpS" name="str" stereotype="dataType"/>
      </uml:Package>
      <packagedElement xmi:type="uml:Class" xmi:id="un2zZnnxq8ptN" name="cForecastEngine">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uvIcDfnm8gG4p" name="mOptions" type="uKr1UHK38DuBn" initialValue="()"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uqUKeHADyg8sq" name="__init__" stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ug5AV4x3wZxu3" name="train" comment="print('caught this training error: ' + repr(error))            ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u8YrIqUz2840n" name="iInputDS" visibility="private" type="u1m8dYSaYIMXz" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uP2tyyv2DvAoo" name="iTime" visibility="private" type="uVeXIZYVGH4k0" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uU5gOij0l7Omm" name="iSignal" visibility="private" type="uq3Oou1PwSflM" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ux8bU6mUpNeUi" name="iHorizon" visibility="private" type="uaQUwBCYCZSTo" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uTWRGwhJ7yqSG" name="iExogenousData" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uEktEcMaG2GK9" name="forecast" comment="print('caught this forecast error: ' + repr(error))">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u6SosqFCdVJ9n" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="usJkap2IA27Rm" name="iInputDS" visibility="private" type="unbbonQogTv5h" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="unlqoGHwHsADr" name="iHorizon" visibility="private" type="uEgvY0Iemn5V3" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="umPmNzxq5T0Lj" name="getModelInfo">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uvqW73k0K5cuA" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ukYT8mqmOm270" name="standardPlots">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uzQTPmehYTH2x" name="name" visibility="private" type="uKmHHEixnwXHw" value="None"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u1NganHrNbceg" name="format" visibility="private" type="uKmHHEixnwXHw" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uW4Vf9rM0QWFn" name="getPlotsAsDict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uTQZWYznmfcgF" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ulMSwBgwK9s0C" name="to_dict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uRaNns0i6Gfpu" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uhXbxzPPCvUCS" name="iWithOptions" visibility="private" type="uh1AyxHDFUOzR" value="False"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uj8SMuAzAjCMk" name="to_json">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZbaUgJ1S3Qaz" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uB8qJdX9kq4eW" name="iWithOptions" visibility="private" type="uh1AyxHDFUOzR" value="False"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uKdBqJed3FsCb" name="computePerf">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uVnzCi3CufsdH" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uyJtrXZQ4bpK0" name="actual" visibility="private" type="uFWBK4laNZd8G" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u4rupoULH8Kjr" name="predicted" visibility="private" type="uEtf0U2GnEyHN" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u3wPOcWstVEEy" name="name" visibility="private" type="uSbTAu2whKaXU" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="upbhXx4ZxBehj" name="generateCode" comment="print(&quot;GENERATED_SQL_CODE&quot; , lSQL);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="urcoXdyh4oqap" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uwiHi7JcbCiyt" name="iDSN" visibility="private" type="uKmHHEixnwXHw" value="None"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u1FPLpf5mtpL1" name="iDialect" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uXIDfe077wm8v" name="tsopts" stereotype="class-or-package">
        <packagedElement xmi:type="uml:Class" xmi:id="uKr1UHK38DuBn" name="cSignalDecomposition_Options"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uhJEfQqowNwUy" name="cHierarchicalForecastEngine">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uz3VvSOgPPXuT" name="mSignalHierarchy" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uEDSwtd7yHpvn" name="new_attribute" visibility="private" type="uQWjcegG2te5T"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uY5gUtjUEjacc" name="new_attribute_1" visibility="private" type="uKr1UHK38DuBn"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ulMkJ33utFdV7" name="__init__" stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uFByyLIUexmi0" name="train" comment="print('caught this training error: ' + repr(error))            ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uvCzr22tr8c1a" name="iInputDS" visibility="private" type="uIShy1OceGIuq" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u6FMeLpgMSsUn" name="iTime" visibility="private" type="uns67s8PutRQJ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ulkXgTkmS6xp9" name="iSignal" visibility="private" type="u63Ns7UKaKgVH" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ujyCggCIOFIhF" name="iHorizon" visibility="private" type="uxpkfnZ22GRlS" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uCZr5mwJqa8pl" name="iHierarchy" visibility="private" type="uKmHHEixnwXHw" value="None"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uxtKsPkFzhVMG" name="iExogenousData" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uV49fVDS9ifFZ" name="forecast" comment="print('caught this forecast error: ' + repr(error))">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uir93GHAtFSz0" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ubKzHr908k4un" name="iInputDS" visibility="private" type="ucV01H7X9n8BN" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uEXEmKQ6gDqA7" name="iHorizon" visibility="private" type="uLYVtxs3ZOmq8" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uYiuN1W6XB6Zg" name="getModelInfo"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u2ee7D1Qb3ZvP" name="standardPlots">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uEE5746WVuihi" name="name" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u9gyHrwjBQijU" name="getPlotsAsDict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ucbQum43zM68A" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uLSxXzQEyw1P7" name="to_dict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uRayo2Xi9tNTV" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uPGXC2PMEthjB" name="to_json">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uz4e7uEDDrR65" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u0tRgKXS9SXz8" name="computePerf">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uPXAHZ2p19KQ2" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uMClrZGKji1wY" name="actual" visibility="private" type="u68yAxWEspo67" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uV5unJhcrxj1C" name="predicted" visibility="private" type="uBcnq0hcwg6pT" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uKmzNIsmj4A6Y" name="name" visibility="private" type="uhiySMxgHDpqM" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uYckxSoSfwhEv" name="generateCode" comment="print(&quot;GENERATED_SQL_CODE&quot; , lSQL);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uQnauCp3faDyu" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufFBe0SlGmjr0" name="iDSN" visibility="private" type="uKmHHEixnwXHw" value="None"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uuDtCT4C7yZ96" name="iDialect" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uZFGWJtKLAXJO" name="create_signal_hierarchy">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uemVPSh3NXkyy" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uhbvlDEDjc9Zv" name="iInputDS" visibility="private" type="uRPFc9FjeMWE7" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uPWbpZZswaUxG" name="iTime" visibility="private" type="uWeEfM1szq6a9" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="um17cOkXWDYtW" name="iSignal" visibility="private" type="u2Qfo59E5kJYS" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="utKht2upuHzNL" name="iHorizon" visibility="private" type="uQ42C6OeO18dy" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uVQl9STTXxyl1" name="iHierarchy" visibility="private" type="uE5xA8tSukKeY" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ugwSMdN3KJllT" name="iExogenousData" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uELcKq5euqIyC" name="plot_Hierarchy">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uBu1i8NQRmGuf" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="udfyPqKNxIAGS" name="iInputDS" visibility="private" type="uvcQWmndRfbBp" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uOSqAkqVYr4Hp" name="iTime" visibility="private" type="uQDdpl7kJNhPO" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uqNp7e5AywShj" name="iSignal" visibility="private" type="uhq2tGuOMgfZw" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uLzWTruHplZvt" name="iHorizon" visibility="private" type="uY4EvfDcsE5Qt" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uDhyoVmX4tbfc" name="iHierarchy" visibility="private" type="u46hzzHkliQAA" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufZ1mVlytwsuL" name="iExogenousData" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uMu6F7MdNE1Z1" name="train_HierarchicalModel">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZaOJ8RaTDBNf" name="iInputDS" visibility="private" type="upt878DKSaYJZ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="utCJFfBvJ3Dtt" name="iTime" visibility="private" type="utjBlbCBuS9Vd" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uO71Dd8Cc3BH7" name="iSignal" visibility="private" type="uQgfJiDeaXCUC" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="unmqCLRSGMjF7" name="iHorizon" visibility="private" type="uFdHL6jtBMtH3" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uBZbtM853t1Eg" name="iHierarchy" visibility="private" type="uyAFPpo09MnaP" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukYuElbGqHxRm" name="iExogenousData" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uIgahzZ643YyP" name="forecast_HierarchicalModel">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uVE6Re3EQFSJ5" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ulBhlun5FV3Qs" name="iInputDS" visibility="private" type="uR6jucmGVwrJ8" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uBRwWgaiHNYNY" name="iHorizon" visibility="private" type="uoZt1gBk4u2ft" value=""/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uD8lAbRD3CZ2p" name="cSignalDecomposition">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uI5wSXDPIojwE" name="mOptions" type="uKr1UHK38DuBn" initialValue="()"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uM9HIGZNKpcpL" name="mExogenousData" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uaWQPTEFpMFxm" name="__init__" stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uopXEHgP6AdAO" name="checkData">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u4vaa5QNkeN4k" name="iInputDS" visibility="private" type="uTTZkr4mFDJjm" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZ1fVIJLixsMZ" name="iTime" visibility="private" type="usx0WILU8itSp" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u2v1SMPjyeDHv" name="iSignal" visibility="private" type="u0UnvbHLbOw8K" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZDNOifjf92q7" name="iHorizon" visibility="private" type="ujjEUruFURif4" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uu56uGSw6v5lr" name="iExogenousData" visibility="private" type="ujEVVePoiylhR" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ufM26grbe0kZv" name="checkData">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uI9C1Qncvafpl" name="iInputDS" visibility="private" type="uyW5jdIPKV88o" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u7PBChiGHJvw1" name="iTime" visibility="private" type="uk0r3DnExe0qt" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZEafdXWw4YOW" name="iSignal" visibility="private" type="uKfcVBBMf7sgH" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uxLG8P8Y9NJUX" name="iHorizon" visibility="private" type="up4GaImOqnTcJ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uF3NJ9eNnhwNl" name="iExogenousData" visibility="private" type="uBzRannZrqBpo" value=""/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uQWjcegG2te5T" name="cSignalHierarchy">
        <ownedAttribute xmi:type="uml:Property" xmi:id="ujjXIWeJ7DfIt" name="mDateColumn" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="um3DSQVgLGrd1" name="mSignal" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uCIJNFas3PbC8" name="mHorizon" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uX51vYhJWpcdO" name="mExogenousData" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uDVi95zD0FOAf" name="mTrainingDataset" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ueXmeUXLqwjaZ" name="mOptions" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uyr2yo1znXsIe" name="mLevels" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uqDTHoravqEVx" name="mStructure" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uSIqkH82nq70k" name="mSummingMatrix" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="usspJH4Tg7xui" name="mModels" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ue03H5v8EqZoA" name="new_attribute" visibility="private" type="uKr1UHK38DuBn"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u4cPYkrzcfeMq" name="new_attribute_1" visibility="private" type="uhJEfQqowNwUy"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u4rj6haYmz3YQ" name="new_attribute_2" visibility="private" type="un2zZnnxq8ptN"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uSeei2AIyxVum" name="__init__" stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u0xtgm075XqEi" name="info">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uHH5IhO1WfVZd" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uxBGHD6ZaF9ru" name="get_exogenous_data" comment="A signal is a hierarchy node same data for all signals one exogenous data by signal">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uQB1p2hK5W9a8" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uIvO0Cr5eBOmo" name="signal" visibility="private" type="uMosb8X9Eafyp" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uQFv41WVnzsiK" name="to_dict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukd9cabpRVk9g" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uYKNblfc5OX0P" name="iWithOptions" visibility="private" type="uh1AyxHDFUOzR" value="False"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uNMlZh7s1BSfq" name="discard_nans_in_aggregate_signals">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uR6P1v14tSk63" type="uh1AyxHDFUOzR" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ucSc91VyYu9ae" name="create_HierarchicalStructure" comment="Stabilize the order of nodes print(self.mStructure);"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uony6NfOEJ7oE" name="create_SummingMatrix" comment="print(self.mSummingMatrix); print(self.mSummingMatrixInverse);"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uz7j2ezlT5oLX" name="checkData" comment="print(type1) level 0 is the original/physical columns print(type2)">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uJ4UxSqlfqFYo" name="df" visibility="private" type="unYjeIW0q4lSL" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uVALqobXGAVmz" name="create_all_levels_dataset" comment="level 0 is the original/physical columns">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ucrcjevG1wYA2" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="upcKEBqqED4w0" name="df" visibility="private" type="ule4djndKI1Yi" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uBEajGWQTj9if" name="addVars">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ujmWVWZDoJxMj" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ubBELPVoIxoIN" name="df" visibility="private" type="uqfWp5EdKw0h6" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u1IFyMvD8q3AB" name="transformDataset">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uJx7uUFUeaAca" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uB92yZOejRQeH" name="df" visibility="private" type="u3QrULOMEqOMm" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uJtG9zMt9FicT" name="get_specific_date_column_for_signal" comment="only for temporal hierarchies">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uNHvIy93XJryR" name="level" visibility="private" type="uT7ZPobm9ItSs" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u03g7xeyFyysm" name="signal" visibility="private" type="uOAWn8osOkesU" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uQeK4NMAUXaoQ" name="get_horizon" comment="only for temporal hierarchies">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uv1Wh7Q9nQaVZ" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uBCXUuWAQYahj" name="level" visibility="private" type="ugfGsW0ASRjaR" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uc4rN7Yp85Flq" name="signal" visibility="private" type="uC12BoZ8SwnDs" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uLoJ9PblrMciJ" name="create_all_levels_models_with_one_engine" comment="Sampling is not compatible with Temporal Hierarchies (#163) print(&quot;CREATED_MODELS&quot;, self.mLevels, self.mModels)">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ulxVikaiPjk1y" name="iAllLevelsDataset" visibility="private" type="ulhUirmC0nykm" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u6shES3MVOkQo" name="H" visibility="private" type="uJq6dmwCLGTKA" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uNlKWZY4Yw3DQ" name="iDateColumn" visibility="private" type="u4V1bIDe2FhWZ" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u1WzSFL3QpVjd" name="fit" comment="self.plot();"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uxfuUTYnHbtwy" name="getModelInfo"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="up0UTX35FQOgj" name="get_plot_annotations">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uAMNwWs254Klr" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uw6OsbZWPZufY" name="plot">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uDbZx36lBy2Cc" name="name" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ukBI77YoOH1U6" name="plot_as_png_base64">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uR1Y9FOaVc1cD" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uy2bWvLxedVdX" name="name" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uMj9V2ifNJFXg" name="standardPlots">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uNBWgVGXorcXS" name="name" visibility="private" type="uKmHHEixnwXHw" value="None"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uyE8p6LpKCaoQ" name="getPlotsAsDict">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="unBQ2WFRLLMLu" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uVYH14sEaTizr" name="forecastAllModels_with_one_engine">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uUrLdUqtYoqF1" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uX6jUvRZn5oTl" name="iAllLevelsDataset" visibility="private" type="uHU7nFVMaHUFF" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uSYDj8aDHgjd5" name="H" visibility="private" type="u0jRTRFxDmU6I" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="usHz2zeNA4BTf" name="iDateColumn" visibility="private" type="uMzBf9CLOF69u" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uO7T7VIG6NsFM" name="getEstimPart">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uFXWgF2uME3Eb" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uzvEBuJhakPPe" name="df" visibility="private" type="upoXvryMCOc4C" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="utqK8Ss6JoP0A" name="getValidPart">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uE5lu0tU4VWjX" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uHkYnE8nnbo6W" name="df" visibility="private" type="uh9AnFmSx6eks" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uvBttf1nrajuy" name="computeTopDownHistoricalProportions" comment="Compute these proportions only on Estimation. print(&quot;AvgHitProp\n&quot;, self.mAvgHistProp); print(&quot;PropHistAvg\n&quot;, self.mPropHistAvg);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uNt5DLFsUgMpM" name="iAllLevelsDataset" visibility="private" type="uqlV69bAqy5LA" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u8htWY1L4xnBt" name="computeTopDownForecastedProportions" comment="print(&quot;ForecastedProp\n&quot;, self.mForecastedProp);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uekn7LdECRAKP" name="iForecast_DF" visibility="private" type="uy67WDrpq5DqB" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uuqcAhclBplRr" name="computeBottomUpForecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uGkTyLxwdJL1c" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uOGSAQQT4gDX8" name="iForecast_DF" visibility="private" type="usn2Nf457FodI" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uvpjRQJGWy8Zm" name="level" visibility="private" type="ujzMBZa2eomtY" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uRe3BNR89Ct3R" name="signal" visibility="private" type="u1UwpjvD3cpJr" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uQHgZ6XTsw49x" name="iPrefix" visibility="private" type="uVhzEYBjTlJpS" value="&quot;BU&quot;"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ughbUbyZyIgmc" name="computeBottomUpForecasts" comment="print(&quot;STRUCTURE &quot; , self.mStructure.keys()); print(lForecast_DF_BU.head()); print(lForecast_DF_BU.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="usUC3WRolhwtC" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uO8PrKlVYeKlZ" name="iForecast_DF" visibility="private" type="uPsBFY3Cfgqag" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u6Wlb0X8eyuLr" name="get_clean_signal_and_forecasts">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uuoFokPd6KrX7" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uhcuzFZZSKJAz" name="iForecast_DF" visibility="private" type="unk0Hm6KIsbtm" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ujrxm3gzzGMF3" name="signal" visibility="private" type="uIclPrusVXMrk" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uuCkdkfjd7X02" name="iPrefixes" visibility="private" type="uvmmadKyDR1hX" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u1b7AnJL73JE7" name="get_reconciled_forecast_prefixes">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uoZ7pbyPkqgIX" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uGI2PMoX0vOsF" name="computePerfOnCombinedForecasts">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uFrUwE1koz61c" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uT1MJH1r8Qxcq" name="iForecast_DF" visibility="private" type="uHhr1LxpNhHX3" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uREHdTFWepRHW" name="computeTopDownForecasts" comment="print(&quot;TOPDOWN_STRUCTURE&quot;, self.mStructure) print(&quot;TOPDOWN_LEVELS&quot;, lLevelsReversed) highest levels (fully aggregated) print(lForecast_DF_TD.head()); print(lForecast_DF_TD.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ugD0w8PNVufFB" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uizADb80rlBDD" name="iForecast_DF" visibility="private" type="ud8tDhpC7ca6g" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u9IMkBEj0UP2E" name="iProp" visibility="private" type="uhK6Hhewarqp2" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufjxMsMOLFF91" name="iPrefix" visibility="private" type="uXyQ5y63kiBvp" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ucmpXUSga3yYF" name="computeMiddleOutForecasts" comment="lower levels .... top-down starting from the middle. print(&quot;MIDDLE_OUT_STRUCTURE&quot;, self.mStructure) print(&quot;MIDDLE_OUT_LEVELS&quot;, levels_below) mid-lewvel : do nothing ????  higher levels .... bottom-up starting from the middle print(lForecast_DF_MO.head()); print(lForecast_DF_MO.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uKAEyrbv6P6In" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uj1c6DgGfYba0" name="iForecast_DF" visibility="private" type="uV7j5rimlnVT0" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uDlpfnw9TUiz1" name="iProp" visibility="private" type="uoagslLWl5ZVX" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukUeXRcMJgJed" name="iPrefix" visibility="private" type="uwjRefp85rTtL" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uHT7edc4zaORt" name="computeOptimalCombination" comment="TODO : use linalg.solve here print(S.shape); print(lBaseForecasts.shape); print(lOptimalForecasts.shape); print(lForecast_DF_OC.head()); print(lForecast_DF_OC.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZTUgP39EebhD" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uw1MxwW90nZT5" name="iForecast_DF" visibility="private" type="u7JbVkFFBMoEt" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u6Dt6PSvynwUN" name="internal_forecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uq1XqfmnfIRM2" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ugO7pHmwy4tXU" name="iInputDS" visibility="private" type="uCzl6uRI40EwQ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uzV5J4ecDDa4V" name="iHorizon" visibility="private" type="ub5aFn9xNJU9z" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ukKALsl7kViKz" name="forecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uVBOTxCoMSJmn" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u3UJY0fPrvZTc" name="iInputDS" visibility="private" type="ubs9cpmbfkNpt" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uE1zo1JBiLAej" name="iHorizon" visibility="private" type="uCXOSLA7XDOH7" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uuFJtcmG5zeDM" name="get_exogenous_data" comment="A signal is a hierarchy node same data for all signals one exogenous data by signal">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uU1hh7GvXokp0" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uCJjH4W5Fq0kw" name="signal" visibility="private" type="upFCsWyRGZQut" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uICReCYUvG6H7" name="checkData" comment="print(type1) level 0 is the original/physical columns print(type2)">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u4YpKxUuhs3LB" name="df" visibility="private" type="uAvJvhxunsGFP" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u6Rnb8q5wC6vZ" name="create_all_levels_dataset" comment="level 0 is the original/physical columns">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uhbjwfFAVfVLE" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uyC8jWBzNJZIy" name="df" visibility="private" type="ucEWEXXkJM1bB" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uCVVE2bZ5AFlj" name="addVars">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uySK45291u6TN" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uvqROsqO5wQhn" name="df" visibility="private" type="uVOn5GrdUfTzR" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uhmMX8GN7ltqV" name="transformDataset">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="urOyvbq2ceJZi" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u7hNWBalRiXXU" name="df" visibility="private" type="uNaYIkSD1SMrm" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u7c5zpm6mRt1u" name="get_specific_date_column_for_signal" comment="only for temporal hierarchies">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uktf3xZY0X3dq" name="level" visibility="private" type="up0DWv3mpWqWt" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uUDG9fd9COKMH" name="signal" visibility="private" type="unel5672YMjbM" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u8lORUlCus0G1" name="get_horizon" comment="only for temporal hierarchies">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufviVy2dLROxB" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uM9awJWvnEt72" name="level" visibility="private" type="u8gZKxdYxWc4b" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="upoIoz8MsK50Z" name="signal" visibility="private" type="uEuG1SDhGzbPo" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uHV56vwEmMOsu" name="create_all_levels_models_with_one_engine" comment="Sampling is not compatible with Temporal Hierarchies (#163) print(&quot;CREATED_MODELS&quot;, self.mLevels, self.mModels)">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uUmKCk0ceA2G8" name="iAllLevelsDataset" visibility="private" type="uYBSGbhsQcNCF" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u8OWpeWW1jJ8u" name="H" visibility="private" type="u3vXl94WzrkuV" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uAVbK70FSdMSn" name="iDateColumn" visibility="private" type="u0pujB6OI1iaA" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ul09MyKzIhRjP" name="forecastAllModels_with_one_engine">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uggiQkrvbAZXr" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uCyfl8e3B6dKp" name="iAllLevelsDataset" visibility="private" type="uiAVy5HE3kJ40" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uiwk0znZln0sY" name="H" visibility="private" type="uNRyl2xLkErnl" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uWNCTXFeDg62Z" name="iDateColumn" visibility="private" type="u9unNLyrciWnZ" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uz2sqSYg5wuHr" name="getEstimPart">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufy7pcOWRFLjB" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uIbHhKJ9sMwAe" name="df" visibility="private" type="usaCOkDi01Iif" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uwPdQGqznqeOe" name="getValidPart">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uwO5G0tYfozcJ" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u3hOkcsRRpMdn" name="df" visibility="private" type="uwyGXdKWbritP" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uChdTiPUxx0Zu" name="computeTopDownHistoricalProportions" comment="Compute these proportions only on Estimation. print(&quot;AvgHitProp\n&quot;, self.mAvgHistProp); print(&quot;PropHistAvg\n&quot;, self.mPropHistAvg);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uqMucQj9aSxOa" name="iAllLevelsDataset" visibility="private" type="u5wTcL1I89VvS" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uQnOY6hHqas3Y" name="computeTopDownForecastedProportions" comment="print(&quot;ForecastedProp\n&quot;, self.mForecastedProp);">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uU7KHlgJlNnpD" name="iForecast_DF" visibility="private" type="uRhtuAPdG8wHq" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u3I1Svco3wKKj" name="computeBottomUpForecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukmTfIiODN01e" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uJ91cjRX3w1hU" name="iForecast_DF" visibility="private" type="uXEL39jR1b3Ra" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uG4P8eCewHGxJ" name="level" visibility="private" type="uZ05kHEsIYIcE" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u376nOahoQzi3" name="signal" visibility="private" type="uGGOwoayrdELT" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u1LURq7rg9GPe" name="iPrefix" visibility="private" type="uVhzEYBjTlJpS" value="&quot;BU&quot;"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="usSRfIbT6phiB" name="computeBottomUpForecasts" comment="print(&quot;STRUCTURE &quot; , self.mStructure.keys()); print(lForecast_DF_BU.head()); print(lForecast_DF_BU.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uEvKc29Mgkk6I" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uxirYustftqYL" name="iForecast_DF" visibility="private" type="uJZiyxyaG4uNu" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uiYjXkXXCOKcG" name="get_clean_signal_and_forecasts">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ucFjQd8gvAelD" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u9mUhAVazoKXT" name="iForecast_DF" visibility="private" type="uesWCmxff9TQi" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u3wpUG78jGRbC" name="signal" visibility="private" type="ukvbqDmHZggZW" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukxiEZrEcgcdE" name="iPrefixes" visibility="private" type="uCqJua1GEe4C3" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="unJEDAsx9aYMc" name="computePerfOnCombinedForecasts">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uFXxorgiwMZJC" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uuF8lJFvIkw0k" name="iForecast_DF" visibility="private" type="uLT288JYgDmXR" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uiII4zDUH3BAs" name="computeTopDownForecasts" comment="print(&quot;TOPDOWN_STRUCTURE&quot;, self.mStructure) print(&quot;TOPDOWN_LEVELS&quot;, lLevelsReversed) highest levels (fully aggregated) print(lForecast_DF_TD.head()); print(lForecast_DF_TD.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="unXzsqx2ZfWrz" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uaEQa5h1LiZ8i" name="iForecast_DF" visibility="private" type="urmeBOWZu10hL" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u90ki9Pf54Ayx" name="iProp" visibility="private" type="ugz1BplfZ9Nlp" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="urovSv9oLv1Tn" name="iPrefix" visibility="private" type="ukBlw7fMI6dln" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uhTilBH3s4cuo" name="computeMiddleOutForecasts" comment="lower levels .... top-down starting from the middle. print(&quot;MIDDLE_OUT_STRUCTURE&quot;, self.mStructure) print(&quot;MIDDLE_OUT_LEVELS&quot;, levels_below) mid-lewvel : do nothing ????  higher levels .... bottom-up starting from the middle print(lForecast_DF_MO.head()); print(lForecast_DF_MO.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uzfwsUAxdT2EG" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ufbMd9S9ztmNU" name="iForecast_DF" visibility="private" type="u31tvBcEVVdZD" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ucUgG5vVenlGB" name="iProp" visibility="private" type="uzZ6yfwHa0P3B" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ukWkIee8M7o3b" name="iPrefix" visibility="private" type="uN1PICHMHLOLh" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="usvpzBTuIM2aL" name="computeOptimalCombination" comment="TODO : use linalg.solve here print(S.shape); print(lBaseForecasts.shape); print(lOptimalForecasts.shape); print(lForecast_DF_OC.head()); print(lForecast_DF_OC.tail());">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uDS2dPERiNjFO" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u7y2vy5WM0F5s" name="iForecast_DF" visibility="private" type="urZvVARUWyUeC" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uaQvr1yiTKwPR" name="internal_forecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uMY1wraeEjvml" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uxsipcSPZOI0K" name="iInputDS" visibility="private" type="u2qkz3KYc3Ff3" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZm50PkHjsaSR" name="iHorizon" visibility="private" type="uxS81CR83vHhn" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u5jz2bgpqWLwO" name="forecast">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u2bBDxJLzCRwx" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u3z9XAvGMCoZW" name="iInputDS" visibility="private" type="ucjrYXo1HHKgJ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uKt3Im5dU02Ge" name="iHorizon" visibility="private" type="ue8FB4vcxUBq7" value=""/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uLM6JYIcbS50i" name="cModelControl">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uUeu9PWXxyjtC" name="mActivePeriodics" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default        " type="ukzfUzfzsRCtg" initialValue="{}"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uz9GgDvRXKGpF" name="mActiveTrends" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default        " type="ukzfUzfzsRCtg" initialValue="{}"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uBW6jvyFEgy3z" name="mActiveAutoRegressions" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default        " type="ukzfUzfzsRCtg" initialValue="{}"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uHF5mLX08ZBF4" name="mActiveDecompositionTypes" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178 " type="ukzfUzfzsRCtg" initialValue="{}"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ur3DumurzMLt9" name="mKnownDecompositionTypes" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178 " type="utuGpzqFrVHrK" initialValue="['T+S+R','TS+R','TSR']"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uqh6zxMjTCnna" name="mKnownTransformations" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178 " type="utuGpzqFrVHrK" initialValue="['None','Difference','RelativeDifference',;'Integration','BoxCox','Quantization','Logit','Fisher','Anscombe']"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ujia4lctmO9LV" name="mKnownTrends" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178 " type="utuGpzqFrVHrK" initialValue="['ConstantTrend',;'Lag1Trend','LinearTrend','PolyTrend','MovingAverage','MovingMedian']"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uLXIPb2mf2MDt" name="mKnownPeriodics" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178 " type="utuGpzqFrVHrK" initialValue="['NoCycle','BestCycle',;'Seasonal_MonthOfYear','Seasonal_Second','Seasonal_Minute','Seasonal_Hour','Seasonal_HourOfWeek','Seasonal_TwoHourOfWeek','Seasonal_ThreeHourOfWeek','Seasonal_FourHourOfWeek','Seasonal_SixHourOfWeek','Seasonal_EightHourOfWeek','Seasonal_TwelveHourOfWeek','Seasonal_DayOfWeek','Seasonal_DayOfMonth','Seasonal_DayOfYear','Seasonal_WeekOfMonth','Seasonal_DayOfNthWeekOfMonth','Seasonal_WeekOfYear']"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uFRa8mbkjlQYz" name="mKnownAutoRegressions" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default          Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment" type="utuGpzqFrVHrK" initialValue="['NoAR',;'AR','ARX','SVR','SVRX','MLP','MLPX','LSTM','LSTMX','XGB','XGBX',# No CROSTONX for the moment'CROSTON','LGB','LGBX']"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ugZKOo2MFrbXG" name="__init__" comment="Add Multiplicative Models/Seasonals #178  &quot;AutoRegression&quot; becomes a little bit confusing as croston does not use lags (???) rather use wikipedia terminology :  https://en.wikipedia.org/wiki/Decomposition_of_time_series AutoRegression =&gt; &quot;irregular component&quot; No CROSTONX for the moment now , set he default models Add Multiplicative Models/Seasonals #178. Only additive models are activated by default        " stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uFxUk2p5U3Iid" name="check_model_type_validity">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ultGGtBSehxxX" name="category" visibility="private" type="u56wwexE8a01v" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u6qS2Ze40zhAe" name="allowed_values" visibility="private" type="uOxum2PFDIwFQ" value=""/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uljQqMJdkTa3f" name="value" visibility="private" type="uCFN0lhTn2ldN" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uLD6hOBWADXRk" name="set_active_decomposition_types" comment="default">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="ujIwAW57Swnh3" name="iDecompTypes" visibility="private" type="uuJR6c2h1Gsij" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ujiQ34n6RyF79" name="set_active_transformations" comment="default">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uvJa8MzYmJhPo" name="transformations" visibility="private" type="umGYGEMZwrfh7" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uSns09GUsxLps" name="set_active_trends" comment="default">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uqAcN2vlaepOw" name="trends" visibility="private" type="uHb9iMIuDrM7s" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uLm4gbMcMRKps" name="set_active_periodics" comment="default">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="utFWDql0UBLN9" name="periodics" visibility="private" type="u0vRBrIfQYh0t" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u0YLiUIpwWbQ1" name="set_active_autoregressions" comment="default">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uXWXQrgTT4whd" name="autoregs" visibility="private" type="uIs0yaSQE7NoK" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="unALbiXCI8Rz5" name="disable_all_transformations"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uFyG23gRMwfBu" name="disable_all_trends"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uXegMMCuaAsaG" name="disable_all_periodics"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uErPeUWVERL8Z" name="disable_all_autoregressions"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="ur2Mm55dmKrqu" name="cCrossValidationOptions">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uanfW2gtqrDrZ" name="mNbFolds" type="u3Yty9NZjxsm7" initialValue="10"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uNK0T8AhJ9HcT" name="__init__" stereotype="constructor"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uIFXdPzQ9Y6IP" name="cCrostonOptions">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uYvwBpzILGDFH" name="mAlpha" comment="can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ? minimum amount/percentage of zeros for a series to be intermittent can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE" type="uqa3uwxnwFNgo" initialValue="0.1"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u3zb2te7Ofzw6" name="mAlphaCriterion" comment="can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ? minimum amount/percentage of zeros for a series to be intermittent can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ?" type="uVhzEYBjTlJpS" initialValue="&quot;L2&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uUjOtzM81AEM2" name="mZeroRate" comment="can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ? minimum amount/percentage of zeros for a series to be intermittent can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ? minimum amount/percentage of zeros for a series to be intermittent" type="uqa3uwxnwFNgo" initialValue="0.1"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u92EmlnyY2Y7X" name="__init__" comment="can be : &quot;CROSTON&quot; , &quot;SBJ&quot; , &quot;SBA&quot; alpha value or None to use optimal alpha based on RMSE use &quot;L2&quot; by default, MAPE is not suitable (a lot of zeros in the signal) ? minimum amount/percentage of zeros for a series to be intermittent" stereotype="constructor"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="u17KOnPkAhLfz" name="cMissingDataOptions">
        <ownedAttribute xmi:type="uml:Property" xmi:id="uvKaVOwJmJhad" name="mTimeMissingDataImputation" comment="[None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;, &quot;Mean&quot;, &quot;Median&quot; , &quot;Constant&quot; , &quot;PreviousValue&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;, &quot;Mean&quot;, &quot;Median&quot; , &quot;Constant&quot; , &quot;PreviousValue&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;]" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uLoao38On7Zn8" name="mConstant" comment="[None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;, &quot;Mean&quot;, &quot;Median&quot; , &quot;Constant&quot; , &quot;PreviousValue&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;, &quot;Mean&quot;, &quot;Median&quot; , &quot;Constant&quot; , &quot;PreviousValue&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;]" type="uqa3uwxnwFNgo" initialValue="0.0"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uVVKlb6T5k6yr" name="__init__" comment="[None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;, &quot;Mean&quot;, &quot;Median&quot; , &quot;Constant&quot; , &quot;PreviousValue&quot;] [None , &quot;DiscardRow&quot;, &quot;Interpolate&quot;]" stereotype="constructor"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="uh1rSIFhuFkL3" name="cSignalDecomposition_Options">
        <generalization xmi:type="uml:Generalization" xmi:id="ukJTGgbRjNHbi" general="uLM6JYIcbS50i"/>
        <generalization xmi:type="uml:Generalization" xmi:id="uASYPaxdkGfdh" general="uLM6JYIcbS50i"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uyRiji6rC9ty3" name="mParallelMode" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0). " type="uh1AyxHDFUOzR" initialValue="True"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uaZmlFb7y6XYw" name="mNbCores" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0). " type="u3Yty9NZjxsm7" initialValue="8"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ucDoMTia00adx" name="mSeed" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0). " type="u3Yty9NZjxsm7" initialValue="1960"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uCMLPfRkO6w8l" name="mEstimRatio" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK." type="uqa3uwxnwFNgo" initialValue="0.8"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u2sa0AUKnBRT9" name="mCustomSplit" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK." type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uQWa0GCWEEYTn" name="mAddPredictionIntervals" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK." type="uh1AyxHDFUOzR" initialValue="True"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uor6F3R4AM6YH" name="mActivateSampling" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series" type="uh1AyxHDFUOzR" initialValue="True"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ufMVAuB3F2tkb" name="mSamplingThreshold" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled." type="u3Yty9NZjxsm7" initialValue="8192"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uC8c5H8Pdc3Rw" name="mTimeDeltaComputationMethod" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uVhzEYBjTlJpS" initialValue="&quot;AVG&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u7XbX1ObqLugL" name="mUserTimeDelta" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="unTotTT0J2x7e" name="mBusinessDaysOnly" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uh1AyxHDFUOzR" initialValue="False"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ueNcnC497YFj3" name="mMaxExogenousCategories" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="u3Yty9NZjxsm7" initialValue="5"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ulHOtY5J3abL1" name="mNoBoxCoxOrders" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="utuGpzqFrVHrK" initialValue="[]"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uilj2f4pDK6Lp" name="mBoxCoxOrders" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="utuGpzqFrVHrK" initialValue="[-2.0,-1.0,0.0,2.0]"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uGXLZbpyfNZ8r" name="mExtensiveBoxCoxOrders" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="utuGpzqFrVHrK" initialValue="[-2,-1,-0.5,-0.33,-0.25,0.0,2,0.5,0.33,0.25]"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ujU1VdyKQzmXw" name="mMaxFeatureForAutoreg" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="u3Yty9NZjxsm7" initialValue="1000"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uFjW2vdifWJwo" name="mModelSelection_Criterion" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uVhzEYBjTlJpS" initialValue="&quot;MASE&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uVHGGoGR0Zem1" name="mCycle_Criterion" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uVhzEYBjTlJpS" initialValue="&quot;MASE&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ufc1jp7g56W90" name="mCycle_Criterion_Threshold" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot;" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="utMDJwNYSTWqm" name="mCycle_Encoding_Scheme" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot;" type="uVhzEYBjTlJpS" initialValue="&quot;Target_Median&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uYFqibudG0E61" name="mHierarchicalCombinationMethod" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot;" type="uVhzEYBjTlJpS" initialValue="&quot;BU&quot;"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ueJkiZHXHM2sb" name="mForecastRectifier" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ukc9kGmzhLdNd" name="mXGBOptions" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="ucu0XE76m5jdP" name="mLGBMOptions" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uaGxX0robYdBU" name="mCrossValidationOptions" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="ur2Mm55dmKrqu" initialValue="()"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uEFY5DBxT1GJq" name="mCrostonOptions" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="uIFXdPzQ9Y6IP" initialValue="()"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uZ0OXYiaSwuLT" name="mMissingDataOptions" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values" type="u17KOnPkAhLfz" initialValue="()"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uM8EetNWGbWlf" name="mDL_Backends" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now" type="uqjnDIkTqdcTe" initialValue="(&quot;PyTorch&quot;,)"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uRMGtnk2rwOlP" name="mPytorch_Options" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="u4TXTit2IxFE2" name="mKeras_Options" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now" type="uKmHHEixnwXHw" initialValue="None"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="uAoBZWrAznr4d" name="mVotingMethod" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0).  to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0). " type="uVhzEYBjTlJpS" initialValue="&quot;Condorcet&quot;"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ujSjjlGPMbazi" name="__init__" comment="to be deprecated when cross validation is OK. sampling can be used for very large time series Time series larger than this threshold will be sampled. can be &quot;AVG&quot;, &quot;MODE&quot;, &quot;USER&quot; &quot;Target_Mean&quot; or &quot;Target_Median&quot; can be &quot;relu&quot; to force positive forecast values Pytorch is the only supported backend for now Or None for Legacy Method (backward compatibility with PyAF 4.0). " stereotype="constructor"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ueMj2hNUFEUN8" name="disableDebuggingOptions"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u3e6WrqHTZF5l" name="enable_slow_mode" comment="quintiles, deciles, and vingtiles;) PyAF does not detect complex seasonal patterns #73. use unlimited cycle lengths in slow mode disable cross validation self.mCrossValidationOptions.mMethod = &quot;TSCV&quot;;"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="ubk6nvU8OSllr" name="enable_fast_mode" comment="quintiles, deciles, and vingtiles;) Add a low-memory mode for Heroku #25"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uVr4VlJKXFqcU" name="enable_low_memory_mode"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uuG8XYQ5kjgRF" name="has_module_installed">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u33Kcrop6Rw6y" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uZebKfSMguFe6" name="module_name" visibility="private" type="uv9aN9sw8i1MA" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uh8kC3o1hj3hl" name="get_available_DL_Backend" comment="pick the first available backend">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uOzNM0whJlnJv" type="uVhzEYBjTlJpS" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uoccwOnS6TLQU" name="getPytorchOrKerasClass">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u6WKqRQR9TJZR" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uPhUE2oum7scL" name="iModel" visibility="private" type="ugfLFYaSUQu8C" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uBDHNFsyMb5Ux" name="hasPytorchOrKerasInstalled">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="upKpBZxN8eVae" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uuSbEespyu1ZC" name="iModel" visibility="private" type="uKmVkG2FYuIGD" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="u6CYjWLd40ulA" name="canBuildXGBoostModel">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uJDEpi3lE8fM3" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uyrcDAP9irVfs" name="iModel" visibility="private" type="uoqvkZtcVlPQx" value=""/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="uQyglkN5nZW8p" name="canBuildLightGBMModel">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="u7pUqXAUlvFRE" type="uVhzEYBjTlJpS" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="uLd4Bd9ByNkLx" name="iModel" visibility="private" type="uCJkRy5ZwbZoo" value=""/>
        </ownedOperation>
      </packagedElement>
      <xmi:Extension extender="umbrello">
        <diagrams resolution="96">
          <diagram xmi.id="ur1rFaQ5DzxzM" name="class diagram" type="1" documentation="" backgroundcolor="#ffffff" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" griddotcolor="#f7f7f7" linecolor="#990000" linewidth="0" textcolor="#000000" usefillcolor="1" showattribassocs="1" showatts="1" showattsig="0" showops="1" showopsig="0" showpackage="1" showpubliconly="0" showscope="1" showstereotype="1" localid="-1" showgrid="0" snapgrid="0" snapcsgrid="0" snapx="25" snapy="25" zoom="100" canvasheight="800" canvaswidth="1100" isopen="1">
            <widgets>
              <classwidget xmi.id="uKr1UHK38DuBn" localid="us4ogoeO07EP4" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="138" y="463" width="274" height="36" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="un2zZnnxq8ptN" localid="ur41G2Q0qAzJU" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="421" y="606" width="179" height="216" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uXIDfe077wm8v" localid="uv59xLaa3pC4u" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="67" y="347" width="147" height="54" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uhJEfQqowNwUy" localid="uYRwYoVwVe4Ga" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="295" y="-8" width="215" height="324" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uQWjcegG2te5T" localid="udzF6fBtaiGOr" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="664" y="60" width="321" height="900" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uD8lAbRD3CZ2p" localid="u3WRSVrLrNJHJ" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="144" y="711" width="179" height="90" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
            </widgets>
            <messages/>
            <associations>
              <assocwidget xmi.id="u4rj6haYmz3YQ" localid="uqtuzH1Dy85kR" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="1" visibilityB="1" changeabilityA="900" changeabilityB="900" widgetaid="uQWjcegG2te5T" widgetbid="un2zZnnxq8ptN" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="uPrVW9sm5YKTO" localid="uXwTWrMlgio9D" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="602" y="631.854" width="123" height="22" isinstance="0" showstereotype="1" text="new_attribute_2" pretext="-" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="664" starty="614.274"/>
                  <endpoint endx="600" endy="655.854"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uI5wSXDPIojwE" localid="uND8nAyJtFCp2" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" widgetaid="uD8lAbRD3CZ2p" widgetbid="uKr1UHK38DuBn" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="uyQW6I3YVH2I0" localid="uAOdZl4W9oiSP" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="245.686" y="501" width="83" height="22" isinstance="0" showstereotype="1" text="mOptions" pretext="+" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="240.291" starty="711"/>
                  <endpoint endx="272.284" endy="499"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="ue03H5v8EqZoA" localid="uAjGYpOp6DlH9" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="1" visibilityB="1" changeabilityA="900" changeabilityB="900" widgetaid="uQWjcegG2te5T" widgetbid="uKr1UHK38DuBn" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="unBNUKS4hLY7O" localid="u28IKOk8SKcSt" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="411.527" y="487" width="108" height="22" isinstance="0" showstereotype="1" text="new_attribute" pretext="-" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="664" starty="501.53"/>
                  <endpoint endx="412" endy="488.23"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uEDSwtd7yHpvn" localid="uYocBVDF2WfYQ" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="1" visibilityB="1" changeabilityA="900" changeabilityB="900" widgetaid="uhJEfQqowNwUy" widgetbid="uQWjcegG2te5T" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="uzdhKfaymjeVi" localid="uSdYsMRFMMcYU" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="560" y="355.639" width="108" height="22" isinstance="0" showstereotype="1" text="new_attribute" pretext="-" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="510" starty="244.687"/>
                  <endpoint endx="664" endy="374.602"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uvIcDfnm8gG4p" localid="u96v431A4vMQl" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" widgetaid="un2zZnnxq8ptN" widgetbid="uKr1UHK38DuBn" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="up6v0Xw8XWa0r" localid="uRnGImKat8Zo6" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="341.898" y="501" width="83" height="22" isinstance="0" showstereotype="1" text="mOptions" pretext="+" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="421" starty="625.45"/>
                  <endpoint endx="293.193" endy="499"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uOnRHLCC37nYJ" localid="unYpdGTku7H3p" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="509" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" roleAdoc="" roleBdoc="" documentation="" widgetaid="uXIDfe077wm8v" widgetbid="uKr1UHK38DuBn" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <linepath layout="Direct">
                  <startpoint startx="174.439" starty="401"/>
                  <endpoint endx="252.374" endy="463"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="u4cPYkrzcfeMq" localid="uowt6MnXP1M8Q" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="1" visibilityB="1" changeabilityA="900" changeabilityB="900" widgetaid="uQWjcegG2te5T" widgetbid="uhJEfQqowNwUy" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="ucr6QyCVl1r2f" localid="u1sFncjTr5dPB" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="512" y="224.466" width="122" height="22" isinstance="0" showstereotype="1" text="new_attribute_1" pretext="-" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="664" starty="374.602"/>
                  <endpoint endx="510" endy="244.687"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uY5gUtjUEjacc" localid="uB5cBAw5SP9g3" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="1" visibilityB="1" changeabilityA="900" changeabilityB="900" widgetaid="uhJEfQqowNwUy" widgetbid="uKr1UHK38DuBn" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="uEaMndBMsiPda" localid="uB32Tj3HbJACN" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="284.018" y="439" width="122" height="22" isinstance="0" showstereotype="1" text="new_attribute_1" pretext="-" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="339.335" starty="316"/>
                  <endpoint endx="282.018" endy="463"/>
                </linepath>
              </assocwidget>
            </associations>
          </diagram>
          <diagram xmi.id="utkIeZ8VV5eba" name="options_class_diagram" type="1" documentation="" backgroundcolor="#ffffff" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" griddotcolor="#f7f7f7" linecolor="#990000" linewidth="0" textcolor="#000000" usefillcolor="1" showattribassocs="1" showatts="1" showattsig="0" showops="1" showopsig="0" showpackage="1" showpubliconly="0" showscope="1" showstereotype="1" localid="-1" showgrid="0" snapgrid="0" snapcsgrid="0" snapx="25" snapy="25" zoom="100" canvasheight="800" canvaswidth="1100" isopen="1">
            <widgets>
              <classwidget xmi.id="u17KOnPkAhLfz" localid="uvZMW8Aa0iH6M" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="160" y="733" width="225" height="72" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uLM6JYIcbS50i" localid="uj8Hku7bsA3LQ" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="156" y="32" width="248" height="378" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="ur2Mm55dmKrqu" localid="uD2JtyRcMS3tf" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="843" y="528" width="181" height="54" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uh1rSIFhuFkL3" localid="uWDKQYf5xD0P8" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="518" y="50" width="253" height="774" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
              <classwidget xmi.id="uIFXdPzQ9Y6IP" localid="uPUqcr2zzprVc" textcolor="#000000" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="0" usesdiagramusefillcolor="0" fillcolor="#ffffc0" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="917" y="644" width="179" height="90" isinstance="0" showstereotype="1" showoperations="1" showpubliconly="0" showopsigs="600" showpackage="1" showscope="1" showattributes="1" showattsigs="600"/>
            </widgets>
            <messages/>
            <associations>
              <assocwidget xmi.id="uaGxX0robYdBU" localid="urEIHdnrJJWnZ" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" widgetaid="uh1rSIFhuFkL3" widgetbid="ur2Mm55dmKrqu" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="ukiuYuPsnaz3W" localid="uKtNs3NgkkleL" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="810.822" y="473" width="188" height="22" isinstance="0" showstereotype="1" text="mCrossValidationOptions" pretext="+" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="771" starty="488.651"/>
                  <endpoint endx="867.373" endy="528"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uEFY5DBxT1GJq" localid="uMSsTLzl6aTUk" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" widgetaid="uh1rSIFhuFkL3" widgetbid="uIFXdPzQ9Y6IP" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="uVCnFRci2fbrL" localid="uvoN9n59BIqJj" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="809.855" y="759" width="136" height="22" isinstance="0" showstereotype="1" text="mCrostonOptions" pretext="+" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="888.214" starty="713"/>
                  <endpoint endx="745" endy="789.462"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uZ0OXYiaSwuLT" localid="uf6Mdr8EElm4W" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="510" visibilityA="0" visibilityB="0" changeabilityA="900" changeabilityB="900" widgetaid="uh1rSIFhuFkL3" widgetbid="u17KOnPkAhLfz" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <floatingtext xmi.id="urkenU4x72BuS" localid="u5Wu3bJH5QzLE" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" x="283" y="609.1" width="166" height="22" isinstance="0" showstereotype="1" text="mMissingDataOptions" pretext="+" posttext="" role="710"/>
                <linepath layout="Direct">
                  <startpoint startx="518" starty="549.898"/>
                  <endpoint endx="312.837" endy="733"/>
                </linepath>
              </assocwidget>
              <assocwidget xmi.id="uASYPaxdkGfdh" localid="u8APZQRbSvpQX" textcolor="none" linecolor="#990000" linewidth="0" usefillcolor="1" usesdiagramfillcolor="1" usesdiagramusefillcolor="1" fillcolor="none" font="Cantarell,11,-1,5,50,0,0,0,0,0" autoresize="1" seqnum="" type="500" widgetaid="uh1rSIFhuFkL3" widgetbid="uLM6JYIcbS50i" indexa="0" totalcounta="0" indexb="0" totalcountb="0">
                <linepath layout="Direct">
                  <startpoint startx="518" starty="362.037"/>
                  <endpoint endx="404" endy="294.481"/>
                </linepath>
              </assocwidget>
            </associations>
          </diagram>
        </diagrams>
      </xmi:Extension>
    </packagedElement>
    <packagedElement xmi:type="uml:Model" xmi:id="Use_Case_View" name="Use Case View"/>
    <packagedElement xmi:type="uml:Model" xmi:id="Component_View" name="Component View"/>
    <packagedElement xmi:type="uml:Model" xmi:id="Deployment_View" name="Deployment View"/>
    <packagedElement xmi:type="uml:Model" xmi:id="Entity_Relationship_Model" name="Entity Relationship Model"/>
  </uml:Model>
  <xmi:Extension extender="umbrello">
    <docsettings viewid="ur1rFaQ5DzxzM" documentation="" uniqueid="u3usYMMGn0Hov"/>
    <listview>
      <listitem id="Views" type="800" open="1">
        <listitem id="Component_View" type="821" open="1"/>
        <listitem id="Deployment_View" type="827" open="1"/>
        <listitem id="Entity_Relationship_Model" type="836" open="1"/>
        <listitem id="Logical_View" type="801" open="1">
          <listitem id="ur2Mm55dmKrqu" type="813" open="0">
            <listitem id="uNK0T8AhJ9HcT" type="815" open="0"/>
            <listitem id="uanfW2gtqrDrZ" type="814" open="0"/>
          </listitem>
          <listitem id="uIFXdPzQ9Y6IP" type="813" open="0">
            <listitem id="u92EmlnyY2Y7X" type="815" open="0"/>
            <listitem id="uYvwBpzILGDFH" type="814" open="0"/>
            <listitem id="u3zb2te7Ofzw6" type="814" open="0"/>
            <listitem id="uUjOtzM81AEM2" type="814" open="0"/>
          </listitem>
          <listitem id="un2zZnnxq8ptN" type="813" open="0">
            <listitem id="uqUKeHADyg8sq" type="815" open="0"/>
            <listitem id="uKdBqJed3FsCb" type="815" open="0"/>
            <listitem id="uEktEcMaG2GK9" type="815" open="0"/>
            <listitem id="upbhXx4ZxBehj" type="815" open="0"/>
            <listitem id="umPmNzxq5T0Lj" type="815" open="0"/>
            <listitem id="uW4Vf9rM0QWFn" type="815" open="0"/>
            <listitem id="uvIcDfnm8gG4p" type="814" open="0"/>
            <listitem id="ukYT8mqmOm270" type="815" open="0"/>
            <listitem id="ulMSwBgwK9s0C" type="815" open="0"/>
            <listitem id="uj8SMuAzAjCMk" type="815" open="0"/>
            <listitem id="ug5AV4x3wZxu3" type="815" open="0"/>
          </listitem>
          <listitem id="uhJEfQqowNwUy" type="813" open="0">
            <listitem id="ulMkJ33utFdV7" type="815" open="0"/>
            <listitem id="u0tRgKXS9SXz8" type="815" open="0"/>
            <listitem id="uZFGWJtKLAXJO" type="815" open="0"/>
            <listitem id="uIgahzZ643YyP" type="815" open="0"/>
            <listitem id="uV49fVDS9ifFZ" type="815" open="0"/>
            <listitem id="uYckxSoSfwhEv" type="815" open="0"/>
            <listitem id="uYiuN1W6XB6Zg" type="815" open="0"/>
            <listitem id="u9gyHrwjBQijU" type="815" open="0"/>
            <listitem id="uz3VvSOgPPXuT" type="814" open="0"/>
            <listitem id="uEDSwtd7yHpvn" type="814" open="0"/>
            <listitem id="uY5gUtjUEjacc" type="814" open="0"/>
            <listitem id="uELcKq5euqIyC" type="815" open="0"/>
            <listitem id="u2ee7D1Qb3ZvP" type="815" open="0"/>
            <listitem id="uLSxXzQEyw1P7" type="815" open="0"/>
            <listitem id="uPGXC2PMEthjB" type="815" open="0"/>
            <listitem id="uMu6F7MdNE1Z1" type="815" open="0"/>
            <listitem id="uFByyLIUexmi0" type="815" open="0"/>
          </listitem>
          <listitem id="ur1rFaQ5DzxzM" type="807" label="class diagram" open="0"/>
          <listitem id="u17KOnPkAhLfz" type="813" open="0">
            <listitem id="uVVKlb6T5k6yr" type="815" open="0"/>
            <listitem id="uLoao38On7Zn8" type="814" open="0"/>
            <listitem id="uvKaVOwJmJhad" type="814" open="0"/>
          </listitem>
          <listitem id="uLM6JYIcbS50i" type="813" open="0">
            <listitem id="ugZKOo2MFrbXG" type="815" open="0"/>
            <listitem id="uFxUk2p5U3Iid" type="815" open="0"/>
            <listitem id="uErPeUWVERL8Z" type="815" open="0"/>
            <listitem id="uXegMMCuaAsaG" type="815" open="0"/>
            <listitem id="unALbiXCI8Rz5" type="815" open="0"/>
            <listitem id="uFyG23gRMwfBu" type="815" open="0"/>
            <listitem id="uBW6jvyFEgy3z" type="814" open="0"/>
            <listitem id="uHF5mLX08ZBF4" type="814" open="0"/>
            <listitem id="uUeu9PWXxyjtC" type="814" open="0"/>
            <listitem id="uz9GgDvRXKGpF" type="814" open="0"/>
            <listitem id="uFRa8mbkjlQYz" type="814" open="0"/>
            <listitem id="ur3DumurzMLt9" type="814" open="0"/>
            <listitem id="uLXIPb2mf2MDt" type="814" open="0"/>
            <listitem id="uqh6zxMjTCnna" type="814" open="0"/>
            <listitem id="ujia4lctmO9LV" type="814" open="0"/>
            <listitem id="u0YLiUIpwWbQ1" type="815" open="0"/>
            <listitem id="uLD6hOBWADXRk" type="815" open="0"/>
            <listitem id="uLm4gbMcMRKps" type="815" open="0"/>
            <listitem id="ujiQ34n6RyF79" type="815" open="0"/>
            <listitem id="uSns09GUsxLps" type="815" open="0"/>
          </listitem>
          <listitem id="uD8lAbRD3CZ2p" type="813" open="0">
            <listitem id="uaWQPTEFpMFxm" type="815" open="0"/>
            <listitem id="uopXEHgP6AdAO" type="815" open="0"/>
            <listitem id="ufM26grbe0kZv" type="815" open="0"/>
            <listitem id="uM9HIGZNKpcpL" type="814" open="0"/>
            <listitem id="uI5wSXDPIojwE" type="814" open="0"/>
          </listitem>
          <listitem id="uh1rSIFhuFkL3" type="813" open="0">
            <listitem id="ujSjjlGPMbazi" type="815" open="0"/>
            <listitem id="uQyglkN5nZW8p" type="815" open="0"/>
            <listitem id="u6CYjWLd40ulA" type="815" open="0"/>
            <listitem id="ueMj2hNUFEUN8" type="815" open="0"/>
            <listitem id="ubk6nvU8OSllr" type="815" open="0"/>
            <listitem id="uVr4VlJKXFqcU" type="815" open="0"/>
            <listitem id="u3e6WrqHTZF5l" type="815" open="0"/>
            <listitem id="uh8kC3o1hj3hl" type="815" open="0"/>
            <listitem id="uoccwOnS6TLQU" type="815" open="0"/>
            <listitem id="uuG8XYQ5kjgRF" type="815" open="0"/>
            <listitem id="uBDHNFsyMb5Ux" type="815" open="0"/>
            <listitem id="uor6F3R4AM6YH" type="814" open="0"/>
            <listitem id="uQWa0GCWEEYTn" type="814" open="0"/>
            <listitem id="uilj2f4pDK6Lp" type="814" open="0"/>
            <listitem id="unTotTT0J2x7e" type="814" open="0"/>
            <listitem id="uaGxX0robYdBU" type="814" open="0"/>
            <listitem id="uEFY5DBxT1GJq" type="814" open="0"/>
            <listitem id="u2sa0AUKnBRT9" type="814" open="0"/>
            <listitem id="uVHGGoGR0Zem1" type="814" open="0"/>
            <listitem id="ufc1jp7g56W90" type="814" open="0"/>
            <listitem id="utMDJwNYSTWqm" type="814" open="0"/>
            <listitem id="uM8EetNWGbWlf" type="814" open="0"/>
            <listitem id="uCMLPfRkO6w8l" type="814" open="0"/>
            <listitem id="uGXLZbpyfNZ8r" type="814" open="0"/>
            <listitem id="ueJkiZHXHM2sb" type="814" open="0"/>
            <listitem id="uYFqibudG0E61" type="814" open="0"/>
            <listitem id="u4TXTit2IxFE2" type="814" open="0"/>
            <listitem id="ucu0XE76m5jdP" type="814" open="0"/>
            <listitem id="ueNcnC497YFj3" type="814" open="0"/>
            <listitem id="ujU1VdyKQzmXw" type="814" open="0"/>
            <listitem id="uZ0OXYiaSwuLT" type="814" open="0"/>
            <listitem id="uFjW2vdifWJwo" type="814" open="0"/>
            <listitem id="uaZmlFb7y6XYw" type="814" open="0"/>
            <listitem id="ulHOtY5J3abL1" type="814" open="0"/>
            <listitem id="uyRiji6rC9ty3" type="814" open="0"/>
            <listitem id="uRMGtnk2rwOlP" type="814" open="0"/>
            <listitem id="ufMVAuB3F2tkb" type="814" open="0"/>
            <listitem id="ucDoMTia00adx" type="814" open="0"/>
            <listitem id="uC8c5H8Pdc3Rw" type="814" open="0"/>
            <listitem id="u7XbX1ObqLugL" type="814" open="0"/>
            <listitem id="uAoBZWrAznr4d" type="814" open="0"/>
            <listitem id="ukc9kGmzhLdNd" type="814" open="0"/>
          </listitem>
          <listitem id="uQWjcegG2te5T" type="813" open="0">
            <listitem id="uSeei2AIyxVum" type="815" open="0"/>
            <listitem id="uBEajGWQTj9if" type="815" open="0"/>
            <listitem id="uCVVE2bZ5AFlj" type="815" open="0"/>
            <listitem id="uz7j2ezlT5oLX" type="815" open="0"/>
            <listitem id="uICReCYUvG6H7" type="815" open="0"/>
            <listitem id="uuqcAhclBplRr" type="815" open="0"/>
            <listitem id="u3I1Svco3wKKj" type="815" open="0"/>
            <listitem id="ughbUbyZyIgmc" type="815" open="0"/>
            <listitem id="usSRfIbT6phiB" type="815" open="0"/>
            <listitem id="ucmpXUSga3yYF" type="815" open="0"/>
            <listitem id="uhTilBH3s4cuo" type="815" open="0"/>
            <listitem id="uHT7edc4zaORt" type="815" open="0"/>
            <listitem id="usvpzBTuIM2aL" type="815" open="0"/>
            <listitem id="uGI2PMoX0vOsF" type="815" open="0"/>
            <listitem id="unJEDAsx9aYMc" type="815" open="0"/>
            <listitem id="u8htWY1L4xnBt" type="815" open="0"/>
            <listitem id="uQnOY6hHqas3Y" type="815" open="0"/>
            <listitem id="uREHdTFWepRHW" type="815" open="0"/>
            <listitem id="uiII4zDUH3BAs" type="815" open="0"/>
            <listitem id="uvBttf1nrajuy" type="815" open="0"/>
            <listitem id="uChdTiPUxx0Zu" type="815" open="0"/>
            <listitem id="uVALqobXGAVmz" type="815" open="0"/>
            <listitem id="u6Rnb8q5wC6vZ" type="815" open="0"/>
            <listitem id="uLoJ9PblrMciJ" type="815" open="0"/>
            <listitem id="uHV56vwEmMOsu" type="815" open="0"/>
            <listitem id="ucSc91VyYu9ae" type="815" open="0"/>
            <listitem id="uony6NfOEJ7oE" type="815" open="0"/>
            <listitem id="uNMlZh7s1BSfq" type="815" open="0"/>
            <listitem id="u1WzSFL3QpVjd" type="815" open="0"/>
            <listitem id="ukKALsl7kViKz" type="815" open="0"/>
            <listitem id="u5jz2bgpqWLwO" type="815" open="0"/>
            <listitem id="uVYH14sEaTizr" type="815" open="0"/>
            <listitem id="ul09MyKzIhRjP" type="815" open="0"/>
            <listitem id="u6Wlb0X8eyuLr" type="815" open="0"/>
            <listitem id="uiYjXkXXCOKcG" type="815" open="0"/>
            <listitem id="uxBGHD6ZaF9ru" type="815" open="0"/>
            <listitem id="uuFJtcmG5zeDM" type="815" open="0"/>
            <listitem id="uQeK4NMAUXaoQ" type="815" open="0"/>
            <listitem id="u8lORUlCus0G1" type="815" open="0"/>
            <listitem id="up0UTX35FQOgj" type="815" open="0"/>
            <listitem id="u1b7AnJL73JE7" type="815" open="0"/>
            <listitem id="uJtG9zMt9FicT" type="815" open="0"/>
            <listitem id="u7c5zpm6mRt1u" type="815" open="0"/>
            <listitem id="uO7T7VIG6NsFM" type="815" open="0"/>
            <listitem id="uz2sqSYg5wuHr" type="815" open="0"/>
            <listitem id="uxfuUTYnHbtwy" type="815" open="0"/>
            <listitem id="uyE8p6LpKCaoQ" type="815" open="0"/>
            <listitem id="utqK8Ss6JoP0A" type="815" open="0"/>
            <listitem id="uwPdQGqznqeOe" type="815" open="0"/>
            <listitem id="u0xtgm075XqEi" type="815" open="0"/>
            <listitem id="u6Dt6PSvynwUN" type="815" open="0"/>
            <listitem id="uaQvr1yiTKwPR" type="815" open="0"/>
            <listitem id="ujjXIWeJ7DfIt" type="814" open="0"/>
            <listitem id="uX51vYhJWpcdO" type="814" open="0"/>
            <listitem id="uCIJNFas3PbC8" type="814" open="0"/>
            <listitem id="uyr2yo1znXsIe" type="814" open="0"/>
            <listitem id="usspJH4Tg7xui" type="814" open="0"/>
            <listitem id="ueXmeUXLqwjaZ" type="814" open="0"/>
            <listitem id="um3DSQVgLGrd1" type="814" open="0"/>
            <listitem id="uqDTHoravqEVx" type="814" open="0"/>
            <listitem id="uSIqkH82nq70k" type="814" open="0"/>
            <listitem id="uDVi95zD0FOAf" type="814" open="0"/>
            <listitem id="ue03H5v8EqZoA" type="814" open="0"/>
            <listitem id="u4cPYkrzcfeMq" type="814" open="0"/>
            <listitem id="u4rj6haYmz3YQ" type="814" open="0"/>
            <listitem id="ukBI77YoOH1U6" type="815" open="0"/>
            <listitem id="uw6OsbZWPZufY" type="815" open="0"/>
            <listitem id="uMj9V2ifNJFXg" type="815" open="0"/>
            <listitem id="uQFv41WVnzsiK" type="815" open="0"/>
            <listitem id="u1IFyMvD8q3AB" type="815" open="0"/>
            <listitem id="uhmMX8GN7ltqV" type="815" open="0"/>
          </listitem>
          <listitem id="Datatypes" type="830" open="0">
            <listitem id="uBWVrFo4ORVyf" type="829" open="0"/>
            <listitem id="uh1AyxHDFUOzR" type="829" open="0"/>
            <listitem id="ukzfUzfzsRCtg" type="829" open="0"/>
            <listitem id="u3Yty9NZjxsm7" type="829" open="0"/>
            <listitem id="utuGpzqFrVHrK" type="829" open="0"/>
            <listitem id="u0NOTmaNFyAN1" type="829" open="0"/>
            <listitem id="uKmHHEixnwXHw" type="829" open="0"/>
            <listitem id="ud5oTp6EPpmdn" type="829" open="0"/>
            <listitem id="uVhzEYBjTlJpS" type="829" open="0"/>
          </listitem>
          <listitem id="utkIeZ8VV5eba" type="807" label="options_class_diagram" open="0"/>
          <listitem id="uXIDfe077wm8v" type="813" open="1">
            <listitem id="uKr1UHK38DuBn" type="813" open="0"/>
          </listitem>
        </listitem>
        <listitem id="Use_Case_View" type="802" open="1"/>
      </listitem>
    </listview>
    <codegeneration>
      <codegenerator language="Python">
        <sourcecode id="uqUKeHADyg8sq" value="self.mSignalDecomposition=tsdec.cSignalDecomposition()&#10;&#10;self.mOptions=tsopts.cSignalDecomposition_Options()&#10;&#10;pass&#10;"/>
        <sourcecode id="ug5AV4x3wZxu3" value="try:&#10;  self.mSignalDecomposition.mOptions=self.mOptions&#10;&#10;  self.mSignalDecomposition.train(iInputDS,iTime,iSignal,iHorizon,iExogenousData)&#10;&#10;&#10;except tsutil.PyAF_Error as error:&#10;  raise error&#10;&#10;except Exception as error:&#10;  raise tsutil.PyAF_Error(&quot;TRAIN_FAILED&quot;)&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="uEktEcMaG2GK9" value="try:&#10;  lForecastFrame=self.mSignalDecomposition.forecast(iInputDS,iHorizon)&#10;&#10;  return lForecastFrame&#10;&#10;&#10;except tsutil.PyAF_Error as error:&#10;  raise error&#10;&#10;except Exception as error:&#10;  raise tsutil.PyAF_Error(&quot;FORECAST_FAILED&quot;)&#10;&#10;&#10;"/>
        <sourcecode id="umPmNzxq5T0Lj" value="return self.mSignalDecomposition.getModelInfo()&#10;&#10;"/>
        <sourcecode id="ukYT8mqmOm270" value="self.mSignalDecomposition.standardPlots(name,format)&#10;&#10;"/>
        <sourcecode id="uW4Vf9rM0QWFn" value="return self.mSignalDecomposition.getPlotsAsDict()&#10;&#10;"/>
        <sourcecode id="ulMSwBgwK9s0C" value="return self.mSignalDecomposition.to_dict(iWithOptions)&#10;&#10;"/>
        <sourcecode id="uj8SMuAzAjCMk" value="lDict=self.to_dict(iWithOptions)&#10;import json&#10;return json.dumps(lDict,default=lambda o:o.__dict__,indent=4,sort_keys=True)&#10;&#10;"/>
        <sourcecode id="uKdBqJed3FsCb" value="lForecastPerf=tsperf.cPerf()&#10;&#10;lForecastPerf.compute(actual,predicted,name)&#10;&#10;return lForecastPerf&#10;&#10;"/>
        <sourcecode id="upbhXx4ZxBehj" value="from CodeGen import TS_CodeGen_Objects as tscodegen&#10;lCodeGenerator=tscodegen.cDecompositionCodeGenObject(iDSN,iDialect)&#10;&#10;lSQL=lCodeGenerator.generateCode(self)&#10;&#10;return lSQL&#10;"/>
        <sourcecode id="ulMkJ33utFdV7" value="self.mOptions=tsopts.cSignalDecomposition_Options()&#10;&#10;self.mSignalHierarchy=None&#10;&#10;pass&#10;"/>
        <sourcecode id="uFByyLIUexmi0" value="try:&#10;  self.train_HierarchicalModel(iInputDS,iTime,iSignal,iHorizon,iHierarchy,iExogenousData)&#10;&#10;&#10;except tsutil.PyAF_Error as error:&#10;  raise error&#10;&#10;except Exception as error:&#10;  raise tsutil.PyAF_Error(&quot;HIERARCHICAL_TRAIN_FAILED&quot;)&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="uV49fVDS9ifFZ" value="try:&#10;  lForecastFrame=self.forecast_HierarchicalModel(iInputDS,iHorizon)&#10;&#10;  return lForecastFrame&#10;&#10;&#10;except tsutil.PyAF_Error as error:&#10;  raise error&#10;&#10;except Exception as error:&#10;  raise tsutil.PyAF_Error(&quot;HIERARCHICAL_FORECAST_FAILED&quot;)&#10;&#10;&#10;"/>
        <sourcecode id="uYiuN1W6XB6Zg" value="self.mSignalHierarchy.getModelInfo()&#10;&#10;"/>
        <sourcecode id="u2ee7D1Qb3ZvP" value="self.mSignalHierarchy.standardPlots(name)&#10;&#10;"/>
        <sourcecode id="u9gyHrwjBQijU" value="return self.mSignalHierarchy.getPlotsAsDict()&#10;&#10;"/>
        <sourcecode id="uLSxXzQEyw1P7" value="return self.mSignalHierarchy.to_dict()&#10;&#10;"/>
        <sourcecode id="uPGXC2PMEthjB" value="lDict=self.to_dict()&#10;import json&#10;return json.dumps(lDict,default=lambda o:o.__dict__,indent=4,sort_keys=True)&#10;&#10;"/>
        <sourcecode id="u0tRgKXS9SXz8" value="from.TS import Perf as tsperf&#10;lForecastPerf=tsperf.cPerf()&#10;&#10;lForecastPerf.compute(actual,predicted,name)&#10;&#10;return lForecastPerf&#10;&#10;"/>
        <sourcecode id="uYckxSoSfwhEv" value="from CodeGen import TS_CodeGen_Objects as tscodegen&#10;lCodeGenerator=tscodegen.cDecompositionCodeGenObject(iDSN,iDialect)&#10;&#10;lSQL=lCodeGenerator.generateCode(self)&#10;&#10;return lSQL&#10;&#10;"/>
        <sourcecode id="uZFGWJtKLAXJO" value="lSignalHierarchy=None&#10;&#10;if(iHierarchy['Type']==&quot;Grouped&quot;):&#10;  from.TS import Signal_Grouping as siggroup&#10;  lSignalHierarchy=siggroup.cSignalGrouping()&#10;&#10;&#10;elif(iHierarchy['Type']==&quot;Temporal&quot;):&#10;  from.TS import Temporal_Hierarchy as temphier&#10;  lSignalHierarchy=temphier.cTemporalHierarchy()&#10;&#10;&#10;else:&#10;  from.TS import SignalHierarchy as sighier&#10;  lSignalHierarchy=sighier.cSignalHierarchy()&#10;&#10;&#10;lSignalHierarchy.mHierarchy=iHierarchy&#10;&#10;lSignalHierarchy.mDateColumn=iTime&#10;&#10;lSignalHierarchy.mSignal=iSignal&#10;&#10;lSignalHierarchy.mHorizon=iHorizon&#10;&#10;lSignalHierarchy.mExogenousData=iExogenousData&#10;&#10;lSignalHierarchy.mTrainingDataset=iInputDS&#10;&#10;lSignalHierarchy.mOptions=self.mOptions&#10;&#10;return lSignalHierarchy&#10;&#10;"/>
        <sourcecode id="uELcKq5euqIyC" value="lSignalHierarchy=self.create_signal_hierarchy(iInputDS,iTime,iSignal,iHorizon,iHierarchy,iExogenousData)&#10;&#10;lSignalHierarchy.create_HierarchicalStructure()&#10;&#10;lSignalHierarchy.plot()&#10;&#10;return lSignalHierarchy&#10;&#10;"/>
        <sourcecode id="uMu6F7MdNE1Z1" value="lSignalHierarchy=self.create_signal_hierarchy(iInputDS,iTime,iSignal,iHorizon,iHierarchy,iExogenousData)&#10;&#10;self.mSignalHierarchy=lSignalHierarchy&#10;&#10;self.mSignalHierarchy.fit()&#10;&#10;"/>
        <sourcecode id="uIgahzZ643YyP" value="return self.mSignalHierarchy.forecast(iInputDS,iHorizon)&#10;"/>
        <sourcecode id="uaWQPTEFpMFxm" value="self.mSigDecBySplitAndTransform={&#10;}&#10;&#10;&#10;self.mOptions=tsopts.cSignalDecomposition_Options()&#10;&#10;self.mExogenousData=None&#10;&#10;pass&#10;"/>
        <sourcecode id="uopXEHgP6AdAO" value="raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NON_INTEGER_HORIZON &quot;+str(iHorizon))&#10;&#10;"/>
        <sourcecode id="ufM26grbe0kZv" value="raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NON_INTEGER_HORIZON &quot;+str(iHorizon))&#10;&#10;"/>
        <sourcecode id="uSeei2AIyxVum" value="self.mHierarchy=None&#10;&#10;self.mDateColumn=None&#10;&#10;self.mSignal=None&#10;&#10;self.mHorizon=None&#10;&#10;self.mExogenousData=None&#10;&#10;self.mTrainingDataset=None&#10;&#10;self.mOptions=None&#10;&#10;self.mLevels=None&#10;&#10;self.mStructure=None&#10;&#10;self.mSummingMatrix=None&#10;&#10;self.mModels=None&#10;&#10;"/>
        <sourcecode id="u0xtgm075XqEi" value="lStr2=&quot;&quot;&#10;return lStr2&#10;&#10;"/>
        <sourcecode id="uxBGHD6ZaF9ru" value="if(self.mExogenousData is None):&#10;  return None&#10;&#10;if(type(self.mExogenousData)==tuple):&#10;  return self.mExogenousData&#10;&#10;if(type(self.mExogenousData)==dict):&#10;  return self.mExogenousData.get(signal)&#10;&#10;raise tsutil.PyAF_Error(&quot;BAD_EXOGENOUS_DATA_SPECIFICATION&quot;)&#10;&#10;"/>
        <sourcecode id="uQFv41WVnzsiK" value="lDict={&#10;}&#10;&#10;&#10;lDict['Structure']=self.mStructure&#10;&#10;lDict['Models']=self.mModels.to_dict(iWithOptions=False)&#10;lDict['Models'].pop('Training_Time')&#10;if(iWithOptions):&#10;  lDict[&quot;Options&quot;]=self.mTimeInfo.mOptions.__dict__&#10;&#10;lDict[&quot;Training_Time&quot;]=self.mTrainingTime&#10;return lDict&#10;&#10;"/>
        <sourcecode id="uNMlZh7s1BSfq" value="return False&#10;"/>
        <sourcecode id="ucSc91VyYu9ae" value="self.mLevels=self.mHierarchy['Levels']&#10;&#10;self.mStructure={&#10;}&#10;&#10;&#10;df=self.mHierarchy['Data']&#10;&#10;lLevelCount=len(self.mLevels)&#10;&#10;for level in range(lLevelCount):&#10;  self.mStructure[level]={&#10;}&#10;&#10;&#10;&#10;for row in range(df.shape[0]):&#10;  for level in range(lLevelCount):&#10;    col=df[df.columns[level]][row]&#10;&#10;    if(col not in self.mStructure[level].keys()):&#10;      self.mStructure[level][col]=set()&#10;&#10;&#10;    if(level&gt;0):&#10;      col1=df[df.columns[level-1]][row]&#10;&#10;      self.mStructure[level][col].add(col1)&#10;&#10;&#10;&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  for col in sorted(self.mStructure[level].keys()):&#10;    self.mStructure[level][col]=sorted(self.mStructure[level][col])&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="uony6NfOEJ7oE" value="lNbNodes=sum([len(self.mStructure[level])for level in self.mStructure.keys()])&#10;&#10;lBaseLevelCount=len(self.mStructure[0])&#10;&#10;lIndices={&#10;}&#10;&#10;&#10;self.mSummingMatrix=np.zeros((lNbNodes,lBaseLevelCount))&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      i=len(lIndices)&#10;&#10;      lIndices[col]=i&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        ii=lIndices[col1]&#10;&#10;        for j in range(lBaseLevelCount):&#10;          self.mSummingMatrix[i][j]=self.mSummingMatrix[ii][j]+self.mSummingMatrix[i][j]&#10;&#10;&#10;&#10;&#10;&#10;  else:&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      lNew_index=len(lIndices)&#10;&#10;      lIndices[col]=lNew_index&#10;&#10;      self.mSummingMatrix[lNew_index][lNew_index]=1&#10;&#10;&#10;&#10;&#10;self.mSummingMatrixInverse=np.linalg.pinv(self.mSummingMatrix)&#10;&#10;"/>
        <sourcecode id="uz7j2ezlT5oLX" value="if(self.mHorizon!=int(self.mHorizon)):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NON_INTEGER_HORIZON &quot;+str(self.mHorizon))&#10;&#10;&#10;if(self.mHorizon&lt;1):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NEGATIVE_OR_NULL_HORIZON &quot;+str(self.mHorizon))&#10;&#10;&#10;if(self.mDateColumn not in df.columns):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_TIME_COLUMN_NOT_FOUND &quot;+str(self.mDateColumn))&#10;&#10;&#10;type1=df[self.mDateColumn].dtype&#10;if(type1.kind!='M'and type1.kind!='i'and type1.kind!='u'and type1.kind!='f'):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_TIME_COLUMN_TYPE_NOT_ALLOWED '&quot;+str(self.mDateColumn)+&quot;' '&quot;+str(type1)+&quot;'&quot;)&#10;&#10;&#10;for k in self.mStructure[0]:&#10;  if(k not in df.columns):&#10;    raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_BASE_COLUMN_NOT_FOUND &quot;+str(k))&#10;&#10;&#10;  type2=df[k].dtype&#10;  if(type2.kind!='i'and type2.kind!='u'and type2.kind!='f'):&#10;    raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_BASE_SIGNAL_COLUMN_TYPE_NOT_ALLOWED '&quot;+str(k)+&quot;' '&quot;+str(type2)+&quot;'&quot;)&#10;&#10;&#10;&#10;"/>
        <sourcecode id="uVALqobXGAVmz" value="self.checkData(df)&#10;&#10;lAllLevelsDataset=df.copy()&#10;&#10;lMapped=True&#10;&#10;for k in self.mStructure[0]:&#10;  if(k not in df.columns):&#10;    lMapped=False&#10;&#10;&#10;&#10;if(not lMapped):&#10;  i=0&#10;&#10;  for k in self.mStructure[0]:&#10;    print(&quot;MAPPING_ORIGINAL_COLUMN&quot;,df.columns[i+1],&quot;=&gt;&quot;,k)&#10;    lAllLevelsDataset[k]=df[df.columns[i+1]]&#10;&#10;    i=i+1&#10;&#10;&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      new_col=None&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        if(new_col is None):&#10;          new_col=lAllLevelsDataset[col1]&#10;&#10;&#10;        else:&#10;          new_col=new_col+lAllLevelsDataset[col1]&#10;&#10;&#10;&#10;      lAllLevelsDataset[col]=new_col&#10;&#10;&#10;&#10;&#10;return lAllLevelsDataset&#10;&#10;"/>
        <sourcecode id="uBEajGWQTj9if" value="lAllLevelsDataset=self.create_all_levels_dataset(df)&#10;&#10;return lAllLevelsDataset&#10;&#10;"/>
        <sourcecode id="u1IFyMvD8q3AB" value="df=self.addVars(df)&#10;&#10;return df&#10;&#10;"/>
        <sourcecode id="uJtG9zMt9FicT" value="return None&#10;"/>
        <sourcecode id="uQeK4NMAUXaoQ" value="return self.mHorizon&#10;"/>
        <sourcecode id="uLoJ9PblrMciJ" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;lSignals=[]&#10;lDateColumns={&#10;}&#10;&#10;lExogenousData={&#10;}&#10;&#10;lHorizons={&#10;}&#10;&#10;lDiscardNulls={&#10;}&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    lSignals=lSignals+[signal]&#10;    lExogenousData[signal]=self.get_exogenous_data(signal)&#10;    lDateColumn=self.get_specific_date_column_for_signal(level,signal)&#10;    lDateColumns[signal]=lDateColumn or iDateColumn&#10;    lHorizons[signal]=self.get_horizon(level,signal)&#10;&#10;&#10;lEngine=autof.cForecastEngine()&#10;lEngine.mOptions=copy.copy(self.mOptions)&#10;&#10;if(self.discard_nans_in_aggregate_signals()):&#10;  lEngine.mOptions.mMissingDataOptions.mTimeMissingDataImputation=&quot;DiscardRow&quot;&#10;  lEngine.mOptions.mMissingDataOptions.mSignalMissingDataImputation=&quot;DiscardRow&quot;&#10;  lEngine.mOptions.mActivateSampling=False&#10;&#10;assert(iAllLevelsDataset.shape[0]&gt;0)&#10;lEngine.train(iAllLevelsDataset,lDateColumns,lSignals,lHorizons,iExogenousData=lExogenousData)&#10;&#10;self.mModels=lEngine&#10;"/>
        <sourcecode id="u1WzSFL3QpVjd" value="lTimer=tsutil.cTimer((&quot;HIERARCHICAL_TRAINING&quot;))&#10;self.create_HierarchicalStructure()&#10;&#10;self.create_SummingMatrix()&#10;&#10;lAllLevelsDataset=self.create_all_levels_dataset(self.mTrainingDataset)&#10;&#10;self.create_all_levels_models_with_one_engine(lAllLevelsDataset,self.mHorizon,self.mDateColumn)&#10;&#10;self.computeTopDownHistoricalProportions(lAllLevelsDataset)&#10;&#10;lForecast_DF=self.internal_forecast(self.mTrainingDataset,self.mHorizon)&#10;self.computePerfOnCombinedForecasts(lForecast_DF.head(lForecast_DF.shape[0]-self.mHorizon))&#10;&#10;self.mTrainingTime=lTimer.get_elapsed_time()&#10;"/>
        <sourcecode id="uxfuUTYnHbtwy" value="lEngine=self.mModels&#10;lEngine.getModelInfo()&#10;&#10;"/>
        <sourcecode id="up0UTX35FQOgj" value="lAnnotations=None&#10;&#10;lHasModels=(self.mModels is not None)&#10;if(lHasModels):&#10;  lPrefixes=self.get_reconciled_forecast_prefixes()&#10;  lAnnotations={&#10;}&#10;&#10;&#10;  for level in sorted(self.mStructure.keys()):&#10;    for signal in sorted(self.mStructure[level].keys()):&#10;      lEngine=self.mModels&#10;      lMAPE='MAPE = %.4f'%self.mValidPerfs[str(signal)+&quot;_Forecast&quot;].mMAPE&#10;      lReconciledMAPEs=[]&#10;      for lPrefix in lPrefixes:&#10;        lMAPE_Rec=self.mValidPerfs[str(signal)+&quot;_&quot;+lPrefix+&quot;_Forecast&quot;].mMAPE&#10;        lReconciledMAPEs.append('MAPE_'+lPrefix+' = %.4f'%lMAPE_Rec)&#10;&#10;&#10;      lAnnotations[signal]=[signal,lMAPE]+lReconciledMAPEs&#10;&#10;      for col1 in sorted(self.mStructure[level][signal]):&#10;        lProp=self.mAvgHistProp[signal][col1]*100&#10;&#10;        lAnnotations[str(signal)+&quot;_&quot;+col1]=('%2.2f %%'%lProp)&#10;&#10;&#10;&#10;&#10;return lAnnotations&#10;"/>
        <sourcecode id="uw6OsbZWPZufY" value="lTimer=tsutil.cTimer((&quot;HIERARCHICAL_PLOTTING&quot;))&#10;lAnnotations=self.get_plot_annotations()&#10;tsplot.plot_hierarchy(self.mStructure,lAnnotations,name)&#10;"/>
        <sourcecode id="ukBI77YoOH1U6" value="lTimer=tsutil.cTimer((&quot;HIERARCHICAL_PLOTTING_AS_PNG&quot;))&#10;lAnnotations=self.get_plot_annotations()&#10;lBase64=tsplot.plot_hierarchy_as_png_base64(self.mStructure,lAnnotations,name)&#10;return lBase64&#10;"/>
        <sourcecode id="uMj9V2ifNJFXg" value="lEngine=self.mModels&#10;lEngine.standardPlots(name+&quot;_Hierarchy_Level_Signal_&quot;)&#10;&#10;self.plot(name+&quot;_Hierarchical_Structure.png&quot;)&#10;"/>
        <sourcecode id="uyE8p6LpKCaoQ" value="lDict={&#10;}&#10;&#10;lDict[&quot;Models&quot;]=self.mModels.getPlotsAsDict()&#10;lDict[&quot;Hierarchical_Structure&quot;]=self.plot_as_png_base64()&#10;return lDict&#10;"/>
        <sourcecode id="uVYH14sEaTizr" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;lEngine=self.mModels&#10;lForecast_DF=lEngine.forecast(iAllLevelsDataset,H)&#10;&#10;lDateColumns=[]&#10;lSigColumns=[]&#10;for signal in lEngine.mSignalDecomposition.mSignals:&#10;  lDateColumn=lEngine.mSignalDecomposition.mDateColumns[signal]&#10;  lDateColumns=lDateColumns+[lDateColumn]&#10;  lSigColumns=lSigColumns+[signal,&#10;  str(signal)+'_Forecast',str(signal)+'_Forecast_Lower_Bound',str(signal)+'_Forecast_Upper_Bound']&#10;lColumns=list(set(lDateColumns))+lSigColumns&#10;if(self.discard_nans_in_aggregate_signals()):&#10;  H=self.mHorizon&#10;  N=lForecast_DF.shape[0]&#10;  lForecast_DF.loc[0:N-H,signal]=lForecast_DF.loc[0:N-H,signal].fillna(0.0)&#10;  lForecast_DF[str(signal)+'_Forecast']=lForecast_DF[str(signal)+'_Forecast'].fillna(0.0)&#10;&#10;return lForecast_DF[lColumns]&#10;"/>
        <sourcecode id="uO7T7VIG6NsFM" value="lEngine=self.mModels&#10;lFrameFit=lEngine.mSignalDecomposition.mBestModel.mTimeInfo.mSplit.getEstimPart(df)&#10;&#10;return lFrameFit&#10;&#10;"/>
        <sourcecode id="utqK8Ss6JoP0A" value="lEngine=self.mModels&#10;lFrameFit=lEngine.mSignalDecomposition.mBestModel.mTimeInfo.mSplit.getValidPart(df)&#10;&#10;return lFrameFit&#10;&#10;"/>
        <sourcecode id="uvBttf1nrajuy" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;TRAINING_HIERARCHICAL_MODEL_COMPUTE_TOP_DOWN_HISTORICAL_PROPORTIONS&quot;)&#10;&#10;self.mAvgHistProp={&#10;}&#10;&#10;&#10;self.mPropHistAvg={&#10;}&#10;&#10;&#10;lEstim=self.getEstimPart(iAllLevelsDataset)&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      self.mAvgHistProp[col]={&#10;}&#10;&#10;&#10;      self.mPropHistAvg[col]={&#10;}&#10;&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        self.mAvgHistProp[col][col1]=(lEstim[col1]/lEstim[col]).mean()&#10;&#10;        self.mPropHistAvg[col][col1]=lEstim[col1].mean()/lEstim[col].mean()&#10;&#10;&#10;&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="u8htWY1L4xnBt" value="self.mForecastedProp={&#10;}&#10;&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      self.mForecastedProp[col]={&#10;}&#10;&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        self.mForecastedProp[col][col1]=(iForecast_DF[col1]/iForecast_DF[col]).mean()&#10;&#10;&#10;&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="uuqcAhclBplRr" value="new_BU_forecast=None&#10;&#10;for col1 in sorted(self.mStructure[level][signal]):&#10;  if(new_BU_forecast is None):&#10;    new_BU_forecast=iForecast_DF[col1+&quot;_Forecast&quot;]&#10;&#10;&#10;  else:&#10;    new_BU_forecast=new_BU_forecast+iForecast_DF[col1+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]&#10;&#10;&#10;&#10;if(new_BU_forecast is None):&#10;  new_BU_forecast=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;return new_BU_forecast&#10;&#10;"/>
        <sourcecode id="ughbUbyZyIgmc" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_BOTTOM_UP_METHOD &quot;+&quot;BU&quot;)&#10;&#10;lForecast_DF_BU=iForecast_DF.copy()&#10;for level in sorted(self.mStructure.keys()):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    new_BU_forecast=self.computeBottomUpForecast(lForecast_DF_BU,level,signal)&#10;&#10;    lForecast_DF_BU[str(signal)+&quot;_BU_Forecast&quot;]=new_BU_forecast&#10;&#10;&#10;&#10;return lForecast_DF_BU&#10;&#10;"/>
        <sourcecode id="u6Wlb0X8eyuLr" value="lEngine=self.mModels&#10;lForecasts=[str(signal)+&quot;_Forecast&quot;]&#10;lForecasts=lForecasts+[str(signal)+&quot;_&quot;+lPrefix+&quot;_Forecast&quot;for lPrefix in iPrefixes]&#10;lColumns=[lEngine.mSignalDecomposition.mDateColumns[signal],signal]+lForecasts&#10;lForecast_DF=iForecast_DF[lColumns]&#10;return lForecast_DF&#10;"/>
        <sourcecode id="u1b7AnJL73JE7" value="lCombinationMethods=self.mOptions.mHierarchicalCombinationMethod&#10;&#10;if type(lCombinationMethods)is not list:&#10;  lCombinationMethods=[lCombinationMethods]&#10;&#10;&#10;lPrefixes=[lPrefix for lPrefix in lCombinationMethods if(lPrefix!='TD')]&#10;&#10;if('TD'in lCombinationMethods):&#10;  lPrefixes=lPrefixes+['AHP_TD','PHA_TD']&#10;&#10;&#10;return lPrefixes&#10;"/>
        <sourcecode id="uGI2PMoX0vOsF" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_OPTIMAL_COMBINATION_METHOD&quot;)&#10;&#10;lEngine=self.mModels&#10;lPrefixes=self.get_reconciled_forecast_prefixes()&#10;self.mEstimPerfs={&#10;}&#10;&#10;self.mValidPerfs={&#10;}&#10;&#10;lPerfs={&#10;}&#10;&#10;&#10;logger.info(&quot;STRUCTURE &quot;+str(sorted(list(self.mStructure.keys()))))&#10;&#10;logger.info(&quot;DATASET_COLUMNS &quot;+str(iForecast_DF.columns))&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  logger.info(&quot;STRUCTURE_LEVEL &quot;+str((level,sorted(list(self.mStructure[level].keys())))))&#10;&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    lForecast_DF=self.get_clean_signal_and_forecasts(iForecast_DF,signal,lPrefixes)&#10;    lFrameFit=self.getEstimPart(lForecast_DF)&#10;&#10;    lFrameValid=self.getValidPart(lForecast_DF)&#10;&#10;    lColumns=[signal,str(signal)+&quot;_Forecast&quot;]+[str(signal)+&quot;_&quot;+lPrefix+&quot;_Forecast&quot;for lPrefix in lPrefixes]&#10;    lFrameFit=lFrameFit[lColumns]&#10;    lFrameValid=lFrameValid[lColumns]&#10;    if(self.discard_nans_in_aggregate_signals()):&#10;      lFrameFit=lFrameFit.dropna()&#10;      lFrameValid=lFrameValid.dropna()&#10;&#10;    lPerfFit=lEngine.computePerf(lFrameFit[signal],lFrameFit[str(signal)+&quot;_Forecast&quot;],signal)&#10;    lPerfValid=lEngine.computePerf(lFrameValid[signal],lFrameValid[str(signal)+&quot;_Forecast&quot;],signal)&#10;    self.mEstimPerfs[str(signal)+&quot;_Forecast&quot;]=lPerfFit&#10;    self.mValidPerfs[str(signal)+&quot;_Forecast&quot;]=lPerfValid&#10;    for iPrefix in lPrefixes:&#10;      lName=str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;&#10;      lPerfFit_Combined=lEngine.computePerf(lFrameFit[signal],lFrameFit[lName],lName)&#10;      lPerfValid_Combined=lEngine.computePerf(lFrameValid[signal],lFrameValid[lName],lName)&#10;      lPerfs[str(signal)+&quot;_&quot;+iPrefix]=(lPerfFit,lPerfValid,lPerfFit_Combined,lPerfValid_Combined)&#10;&#10;      self.mEstimPerfs[lName]=lPerfFit_Combined&#10;      self.mValidPerfs[lName]=lPerfValid_Combined&#10;&#10;&#10;&#10;for(sig,perf)in sorted(lPerfs.items()):&#10;  logger.info(&quot;REPORT_COMBINED_FORECASTS_FIT_PERF &quot;+str(perf[2].to_dict()))&#10;  logger.info(&quot;REPORT_COMBINED_FORECASTS_VALID_PERF &quot;+str(perf[3].to_dict()))&#10;&#10;return lPerfs&#10;&#10;"/>
        <sourcecode id="uREHdTFWepRHW" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_TOP_DOWN_METHOD &quot;+iPrefix)&#10;&#10;lForecast_DF_TD=iForecast_DF.copy()&#10;lLevelsReversed=sorted(self.mStructure.keys(),reverse=True)&#10;&#10;lHighestLevel=lLevelsReversed[0]&#10;&#10;for signal in sorted(self.mStructure[lHighestLevel].keys()):&#10;  lForecast_DF_TD[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;for level in lLevelsReversed:&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    for col in sorted(self.mStructure[level][signal]):&#10;      new_TD_forecast=lForecast_DF_TD[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]*iProp[signal][col]&#10;&#10;      lForecast_DF_TD[str(col)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_TD_forecast&#10;&#10;&#10;&#10;&#10;return lForecast_DF_TD&#10;&#10;"/>
        <sourcecode id="ucmpXUSga3yYF" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_MIDDLE_OUT_METHOD &quot;+iPrefix)&#10;&#10;lLevels=self.mStructure.keys()&#10;&#10;lMidLevel=len(lLevels)//2&#10;&#10;lForecast_DF_MO=iForecast_DF.copy()&#10;levels_below=sorted([level for level in self.mStructure.keys()if(level&lt;=lMidLevel)],&#10;reverse=True)&#10;for signal in sorted(self.mStructure[lMidLevel].keys()):&#10;  lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;for level in levels_below:&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    for col in sorted(self.mStructure[level][signal]):&#10;      new_MO_forecast=lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]*iProp[signal][col]&#10;&#10;      lForecast_DF_MO[str(col)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_MO_forecast&#10;&#10;&#10;&#10;&#10;for level in range(lMidLevel+1,len(self.mStructure.keys())):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    new_MO_forecast=self.computeBottomUpForecast(lForecast_DF_MO,level,signal,iPrefix)&#10;&#10;    lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_MO_forecast&#10;&#10;&#10;&#10;return lForecast_DF_MO&#10;&#10;"/>
        <sourcecode id="uHT7edc4zaORt" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_OPTIMAL_COMBINATION_METHOD &quot;+&quot;OC&quot;)&#10;&#10;lBaseNames=[]&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  for col in sorted(self.mStructure[level].keys()):&#10;    lBaseNames.append(col)&#10;&#10;&#10;&#10;lBaseForecastNames=[str(col)+&quot;_Forecast&quot;for col in lBaseNames]&#10;lBaseForecasts=iForecast_DF[lBaseForecastNames]&#10;&#10;S=self.mSummingMatrix&#10;&#10;lInv=np.linalg.inv(S.T.dot(S))&#10;lOptimalForecasts=S.dot(lInv).dot(S.T).dot(lBaseForecasts.values.T)&#10;lOptimalNames=[(str(col)+&quot;_OC_Forecast&quot;)for col in lBaseNames]&#10;&#10;df=pd.DataFrame(lOptimalForecasts.T)&#10;&#10;df.columns=lOptimalNames&#10;&#10;lForecast_DF_OC=pd.concat([iForecast_DF,df],axis=1)&#10;&#10;return lForecast_DF_OC&#10;&#10;"/>
        <sourcecode id="u6Dt6PSvynwUN" value="lAllLevelsDataset=self.create_all_levels_dataset(iInputDS)&#10;&#10;lForecast_DF=self.forecastAllModels_with_one_engine(lAllLevelsDataset,iHorizon,self.mDateColumn)&#10;&#10;lCombinationMethods=self.mOptions.mHierarchicalCombinationMethod&#10;&#10;if type(lCombinationMethods)is not list:&#10;  lCombinationMethods=[lCombinationMethods]&#10;&#10;&#10;logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_COMBINATION_METHODS &quot;+str(lCombinationMethods))&#10;&#10;for lMethod in lCombinationMethods:&#10;  if(lMethod==&quot;BU&quot;):&#10;  lForecast_DF_BU=self.computeBottomUpForecasts(lForecast_DF)&#10;  lForecast_DF=lForecast_DF_BU&#10;  if(lMethod==&quot;TD&quot;):&#10;  lForecast_DF_TD_AHP=self.computeTopDownForecasts(lForecast_DF,self.mAvgHistProp,&quot;AHP_TD&quot;)lForecast_DF=lForecast_DF_TD_AHP&#10;  lForecast_DF_TD_PHA=self.computeTopDownForecasts(lForecast_DF,self.mPropHistAvg,&quot;PHA_TD&quot;)lForecast_DF=lForecast_DF_TD_PHA&#10;  if(lMethod==&quot;MO&quot;):&#10;  lForecast_DF_MO=self.computeMiddleOutForecasts(lForecast_DF,self.mPropHistAvg,&quot;MO&quot;)lForecast_DF=lForecast_DF_MO&#10;  if(lMethod==&quot;OC&quot;):&#10;  lForecast_DF_OC=self.computeOptimalCombination(lForecast_DF)&#10;  lForecast_DF=lForecast_DF_OC&#10;&#10;return lForecast_DF&#10;"/>
        <sourcecode id="ukKALsl7kViKz" value="lTimer=tsutil.cTimer((&quot;HIERARCHICAL_FORECAST&quot;))&#10;lForecast_DF=self.internal_forecast(iInputDS,iHorizon)&#10;return lForecast_DF&#10;"/>
        <sourcecode id="uuFJtcmG5zeDM" value="if(self.mExogenousData is None):&#10;  return None&#10;&#10;if(type(self.mExogenousData)==tuple):&#10;  return self.mExogenousData&#10;&#10;if(type(self.mExogenousData)==dict):&#10;  return self.mExogenousData.get(signal)&#10;&#10;raise tsutil.PyAF_Error(&quot;BAD_EXOGENOUS_DATA_SPECIFICATION&quot;)&#10;&#10;"/>
        <sourcecode id="uICReCYUvG6H7" value="if(self.mHorizon!=int(self.mHorizon)):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NON_INTEGER_HORIZON &quot;+str(self.mHorizon))&#10;&#10;&#10;if(self.mHorizon&lt;1):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_NEGATIVE_OR_NULL_HORIZON &quot;+str(self.mHorizon))&#10;&#10;&#10;if(self.mDateColumn not in df.columns):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_TIME_COLUMN_NOT_FOUND &quot;+str(self.mDateColumn))&#10;&#10;&#10;type1=df[self.mDateColumn].dtype&#10;if(type1.kind!='M'and type1.kind!='i'and type1.kind!='u'and type1.kind!='f'):&#10;  raise tsutil.PyAF_Error(&quot;PYAF_ERROR_TIME_COLUMN_TYPE_NOT_ALLOWED '&quot;+str(self.mDateColumn)+&quot;' '&quot;+str(type1)+&quot;'&quot;)&#10;&#10;&#10;for k in self.mStructure[0]:&#10;  if(k not in df.columns):&#10;    raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_BASE_COLUMN_NOT_FOUND &quot;+str(k))&#10;&#10;&#10;  type2=df[k].dtype&#10;  if(type2.kind!='i'and type2.kind!='u'and type2.kind!='f'):&#10;    raise tsutil.PyAF_Error(&quot;PYAF_ERROR_HIERARCHY_BASE_SIGNAL_COLUMN_TYPE_NOT_ALLOWED '&quot;+str(k)+&quot;' '&quot;+str(type2)+&quot;'&quot;)&#10;&#10;&#10;&#10;"/>
        <sourcecode id="u6Rnb8q5wC6vZ" value="self.checkData(df)&#10;&#10;lAllLevelsDataset=df.copy()&#10;&#10;lMapped=True&#10;&#10;for k in self.mStructure[0]:&#10;  if(k not in df.columns):&#10;    lMapped=False&#10;&#10;&#10;&#10;if(not lMapped):&#10;  i=0&#10;&#10;  for k in self.mStructure[0]:&#10;    print(&quot;MAPPING_ORIGINAL_COLUMN&quot;,df.columns[i+1],&quot;=&gt;&quot;,k)&#10;    lAllLevelsDataset[k]=df[df.columns[i+1]]&#10;&#10;    i=i+1&#10;&#10;&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      new_col=None&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        if(new_col is None):&#10;          new_col=lAllLevelsDataset[col1]&#10;&#10;&#10;        else:&#10;          new_col=new_col+lAllLevelsDataset[col1]&#10;&#10;&#10;&#10;      lAllLevelsDataset[col]=new_col&#10;&#10;&#10;&#10;&#10;return lAllLevelsDataset&#10;&#10;"/>
        <sourcecode id="uCVVE2bZ5AFlj" value="lAllLevelsDataset=self.create_all_levels_dataset(df)&#10;&#10;return lAllLevelsDataset&#10;&#10;"/>
        <sourcecode id="uhmMX8GN7ltqV" value="df=self.addVars(df)&#10;&#10;return df&#10;&#10;"/>
        <sourcecode id="u7c5zpm6mRt1u" value="return None&#10;"/>
        <sourcecode id="u8lORUlCus0G1" value="return self.mHorizon&#10;"/>
        <sourcecode id="uHV56vwEmMOsu" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;lSignals=[]&#10;lDateColumns={&#10;}&#10;&#10;lExogenousData={&#10;}&#10;&#10;lHorizons={&#10;}&#10;&#10;lDiscardNulls={&#10;}&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    lSignals=lSignals+[signal]&#10;    lExogenousData[signal]=self.get_exogenous_data(signal)&#10;    lDateColumn=self.get_specific_date_column_for_signal(level,signal)&#10;    lDateColumns[signal]=lDateColumn or iDateColumn&#10;    lHorizons[signal]=self.get_horizon(level,signal)&#10;&#10;&#10;lEngine=autof.cForecastEngine()&#10;lEngine.mOptions=copy.copy(self.mOptions)&#10;&#10;if(self.discard_nans_in_aggregate_signals()):&#10;  lEngine.mOptions.mMissingDataOptions.mTimeMissingDataImputation=&quot;DiscardRow&quot;&#10;  lEngine.mOptions.mMissingDataOptions.mSignalMissingDataImputation=&quot;DiscardRow&quot;&#10;  lEngine.mOptions.mActivateSampling=False&#10;&#10;assert(iAllLevelsDataset.shape[0]&gt;0)&#10;lEngine.train(iAllLevelsDataset,lDateColumns,lSignals,lHorizons,iExogenousData=lExogenousData)&#10;&#10;self.mModels=lEngine&#10;"/>
        <sourcecode id="ul09MyKzIhRjP" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;lEngine=self.mModels&#10;lForecast_DF=lEngine.forecast(iAllLevelsDataset,H)&#10;&#10;lDateColumns=[]&#10;lSigColumns=[]&#10;for signal in lEngine.mSignalDecomposition.mSignals:&#10;  lDateColumn=lEngine.mSignalDecomposition.mDateColumns[signal]&#10;  lDateColumns=lDateColumns+[lDateColumn]&#10;  lSigColumns=lSigColumns+[signal,&#10;  str(signal)+'_Forecast',str(signal)+'_Forecast_Lower_Bound',str(signal)+'_Forecast_Upper_Bound']&#10;lColumns=list(set(lDateColumns))+lSigColumns&#10;if(self.discard_nans_in_aggregate_signals()):&#10;  H=self.mHorizon&#10;  N=lForecast_DF.shape[0]&#10;  lForecast_DF.loc[0:N-H,signal]=lForecast_DF.loc[0:N-H,signal].fillna(0.0)&#10;  lForecast_DF[str(signal)+'_Forecast']=lForecast_DF[str(signal)+'_Forecast'].fillna(0.0)&#10;&#10;return lForecast_DF[lColumns]&#10;"/>
        <sourcecode id="uz2sqSYg5wuHr" value="lEngine=self.mModels&#10;lFrameFit=lEngine.mSignalDecomposition.mBestModel.mTimeInfo.mSplit.getEstimPart(df)&#10;&#10;return lFrameFit&#10;&#10;"/>
        <sourcecode id="uwPdQGqznqeOe" value="lEngine=self.mModels&#10;lFrameFit=lEngine.mSignalDecomposition.mBestModel.mTimeInfo.mSplit.getValidPart(df)&#10;&#10;return lFrameFit&#10;&#10;"/>
        <sourcecode id="uChdTiPUxx0Zu" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;TRAINING_HIERARCHICAL_MODEL_COMPUTE_TOP_DOWN_HISTORICAL_PROPORTIONS&quot;)&#10;&#10;self.mAvgHistProp={&#10;}&#10;&#10;&#10;self.mPropHistAvg={&#10;}&#10;&#10;&#10;lEstim=self.getEstimPart(iAllLevelsDataset)&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      self.mAvgHistProp[col]={&#10;}&#10;&#10;&#10;      self.mPropHistAvg[col]={&#10;}&#10;&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        self.mAvgHistProp[col][col1]=(lEstim[col1]/lEstim[col]).mean()&#10;&#10;        self.mPropHistAvg[col][col1]=lEstim[col1].mean()/lEstim[col].mean()&#10;&#10;&#10;&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="uQnOY6hHqas3Y" value="self.mForecastedProp={&#10;}&#10;&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  if(level&gt;0):&#10;    for col in sorted(self.mStructure[level].keys()):&#10;      self.mForecastedProp[col]={&#10;}&#10;&#10;&#10;      for col1 in sorted(self.mStructure[level][col]):&#10;        self.mForecastedProp[col][col1]=(iForecast_DF[col1]/iForecast_DF[col]).mean()&#10;&#10;&#10;&#10;&#10;&#10;pass&#10;"/>
        <sourcecode id="u3I1Svco3wKKj" value="new_BU_forecast=None&#10;&#10;for col1 in sorted(self.mStructure[level][signal]):&#10;  if(new_BU_forecast is None):&#10;    new_BU_forecast=iForecast_DF[col1+&quot;_Forecast&quot;]&#10;&#10;&#10;  else:&#10;    new_BU_forecast=new_BU_forecast+iForecast_DF[col1+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]&#10;&#10;&#10;&#10;if(new_BU_forecast is None):&#10;  new_BU_forecast=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;return new_BU_forecast&#10;&#10;"/>
        <sourcecode id="usSRfIbT6phiB" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_BOTTOM_UP_METHOD &quot;+&quot;BU&quot;)&#10;&#10;lForecast_DF_BU=iForecast_DF.copy()&#10;for level in sorted(self.mStructure.keys()):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    new_BU_forecast=self.computeBottomUpForecast(lForecast_DF_BU,level,signal)&#10;&#10;    lForecast_DF_BU[str(signal)+&quot;_BU_Forecast&quot;]=new_BU_forecast&#10;&#10;&#10;&#10;return lForecast_DF_BU&#10;&#10;"/>
        <sourcecode id="uiYjXkXXCOKcG" value="lEngine=self.mModels&#10;lForecasts=[str(signal)+&quot;_Forecast&quot;]&#10;lForecasts=lForecasts+[str(signal)+&quot;_&quot;+lPrefix+&quot;_Forecast&quot;for lPrefix in iPrefixes]&#10;lColumns=[lEngine.mSignalDecomposition.mDateColumns[signal],signal]+lForecasts&#10;lForecast_DF=iForecast_DF[lColumns]&#10;return lForecast_DF&#10;"/>
        <sourcecode id="unJEDAsx9aYMc" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_OPTIMAL_COMBINATION_METHOD&quot;)&#10;&#10;lEngine=self.mModels&#10;lPrefixes=self.get_reconciled_forecast_prefixes()&#10;self.mEstimPerfs={&#10;}&#10;&#10;self.mValidPerfs={&#10;}&#10;&#10;lPerfs={&#10;}&#10;&#10;&#10;logger.info(&quot;STRUCTURE &quot;+str(sorted(list(self.mStructure.keys()))))&#10;&#10;logger.info(&quot;DATASET_COLUMNS &quot;+str(iForecast_DF.columns))&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  logger.info(&quot;STRUCTURE_LEVEL &quot;+str((level,sorted(list(self.mStructure[level].keys())))))&#10;&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    lForecast_DF=self.get_clean_signal_and_forecasts(iForecast_DF,signal,lPrefixes)&#10;    lFrameFit=self.getEstimPart(lForecast_DF)&#10;&#10;    lFrameValid=self.getValidPart(lForecast_DF)&#10;&#10;    lColumns=[signal,str(signal)+&quot;_Forecast&quot;]+[str(signal)+&quot;_&quot;+lPrefix+&quot;_Forecast&quot;for lPrefix in lPrefixes]&#10;    lFrameFit=lFrameFit[lColumns]&#10;    lFrameValid=lFrameValid[lColumns]&#10;    if(self.discard_nans_in_aggregate_signals()):&#10;      lFrameFit=lFrameFit.dropna()&#10;      lFrameValid=lFrameValid.dropna()&#10;&#10;    lPerfFit=lEngine.computePerf(lFrameFit[signal],lFrameFit[str(signal)+&quot;_Forecast&quot;],signal)&#10;    lPerfValid=lEngine.computePerf(lFrameValid[signal],lFrameValid[str(signal)+&quot;_Forecast&quot;],signal)&#10;    self.mEstimPerfs[str(signal)+&quot;_Forecast&quot;]=lPerfFit&#10;    self.mValidPerfs[str(signal)+&quot;_Forecast&quot;]=lPerfValid&#10;    for iPrefix in lPrefixes:&#10;      lName=str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;&#10;      lPerfFit_Combined=lEngine.computePerf(lFrameFit[signal],lFrameFit[lName],lName)&#10;      lPerfValid_Combined=lEngine.computePerf(lFrameValid[signal],lFrameValid[lName],lName)&#10;      lPerfs[str(signal)+&quot;_&quot;+iPrefix]=(lPerfFit,lPerfValid,lPerfFit_Combined,lPerfValid_Combined)&#10;&#10;      self.mEstimPerfs[lName]=lPerfFit_Combined&#10;      self.mValidPerfs[lName]=lPerfValid_Combined&#10;&#10;&#10;&#10;for(sig,perf)in sorted(lPerfs.items()):&#10;  logger.info(&quot;REPORT_COMBINED_FORECASTS_FIT_PERF &quot;+str(perf[2].to_dict()))&#10;  logger.info(&quot;REPORT_COMBINED_FORECASTS_VALID_PERF &quot;+str(perf[3].to_dict()))&#10;&#10;return lPerfs&#10;&#10;"/>
        <sourcecode id="uiII4zDUH3BAs" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_TOP_DOWN_METHOD &quot;+iPrefix)&#10;&#10;lForecast_DF_TD=iForecast_DF.copy()&#10;lLevelsReversed=sorted(self.mStructure.keys(),reverse=True)&#10;&#10;lHighestLevel=lLevelsReversed[0]&#10;&#10;for signal in sorted(self.mStructure[lHighestLevel].keys()):&#10;  lForecast_DF_TD[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;for level in lLevelsReversed:&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    for col in sorted(self.mStructure[level][signal]):&#10;      new_TD_forecast=lForecast_DF_TD[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]*iProp[signal][col]&#10;&#10;      lForecast_DF_TD[str(col)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_TD_forecast&#10;&#10;&#10;&#10;&#10;return lForecast_DF_TD&#10;&#10;"/>
        <sourcecode id="uhTilBH3s4cuo" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_MIDDLE_OUT_METHOD &quot;+iPrefix)&#10;&#10;lLevels=self.mStructure.keys()&#10;&#10;lMidLevel=len(lLevels)//2&#10;&#10;lForecast_DF_MO=iForecast_DF.copy()&#10;levels_below=sorted([level for level in self.mStructure.keys()if(level&lt;=lMidLevel)],&#10;reverse=True)&#10;for signal in sorted(self.mStructure[lMidLevel].keys()):&#10;  lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=iForecast_DF[str(signal)+&quot;_Forecast&quot;]&#10;&#10;&#10;for level in levels_below:&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    for col in sorted(self.mStructure[level][signal]):&#10;      new_MO_forecast=lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]*iProp[signal][col]&#10;&#10;      lForecast_DF_MO[str(col)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_MO_forecast&#10;&#10;&#10;&#10;&#10;for level in range(lMidLevel+1,len(self.mStructure.keys())):&#10;  for signal in sorted(self.mStructure[level].keys()):&#10;    new_MO_forecast=self.computeBottomUpForecast(lForecast_DF_MO,level,signal,iPrefix)&#10;&#10;    lForecast_DF_MO[str(signal)+&quot;_&quot;+iPrefix+&quot;_Forecast&quot;]=new_MO_forecast&#10;&#10;&#10;&#10;return lForecast_DF_MO&#10;&#10;"/>
        <sourcecode id="usvpzBTuIM2aL" value="logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_OPTIMAL_COMBINATION_METHOD &quot;+&quot;OC&quot;)&#10;&#10;lBaseNames=[]&#10;&#10;for level in sorted(self.mStructure.keys()):&#10;  for col in sorted(self.mStructure[level].keys()):&#10;    lBaseNames.append(col)&#10;&#10;&#10;&#10;lBaseForecastNames=[str(col)+&quot;_Forecast&quot;for col in lBaseNames]&#10;lBaseForecasts=iForecast_DF[lBaseForecastNames]&#10;&#10;S=self.mSummingMatrix&#10;&#10;lInv=np.linalg.inv(S.T.dot(S))&#10;lOptimalForecasts=S.dot(lInv).dot(S.T).dot(lBaseForecasts.values.T)&#10;lOptimalNames=[(str(col)+&quot;_OC_Forecast&quot;)for col in lBaseNames]&#10;&#10;df=pd.DataFrame(lOptimalForecasts.T)&#10;&#10;df.columns=lOptimalNames&#10;&#10;lForecast_DF_OC=pd.concat([iForecast_DF,df],axis=1)&#10;&#10;return lForecast_DF_OC&#10;&#10;"/>
        <sourcecode id="uaQvr1yiTKwPR" value="lAllLevelsDataset=self.create_all_levels_dataset(iInputDS)&#10;&#10;lForecast_DF=self.forecastAllModels_with_one_engine(lAllLevelsDataset,iHorizon,self.mDateColumn)&#10;&#10;lCombinationMethods=self.mOptions.mHierarchicalCombinationMethod&#10;&#10;if type(lCombinationMethods)is not list:&#10;  lCombinationMethods=[lCombinationMethods]&#10;&#10;&#10;logger=tsutil.get_pyaf_hierarchical_logger()&#10;&#10;logger.info(&quot;FORECASTING_HIERARCHICAL_MODEL_COMBINATION_METHODS &quot;+str(lCombinationMethods))&#10;&#10;for lMethod in lCombinationMethods:&#10;  if(lMethod==&quot;BU&quot;):&#10;  lForecast_DF_BU=self.computeBottomUpForecasts(lForecast_DF)&#10;  lForecast_DF=lForecast_DF_BU&#10;  if(lMethod==&quot;TD&quot;):&#10;  lForecast_DF_TD_AHP=self.computeTopDownForecasts(lForecast_DF,self.mAvgHistProp,&quot;AHP_TD&quot;)lForecast_DF=lForecast_DF_TD_AHP&#10;  lForecast_DF_TD_PHA=self.computeTopDownForecasts(lForecast_DF,self.mPropHistAvg,&quot;PHA_TD&quot;)lForecast_DF=lForecast_DF_TD_PHA&#10;  if(lMethod==&quot;MO&quot;):&#10;  lForecast_DF_MO=self.computeMiddleOutForecasts(lForecast_DF,self.mPropHistAvg,&quot;MO&quot;)lForecast_DF=lForecast_DF_MO&#10;  if(lMethod==&quot;OC&quot;):&#10;  lForecast_DF_OC=self.computeOptimalCombination(lForecast_DF)&#10;  lForecast_DF=lForecast_DF_OC&#10;&#10;return lForecast_DF&#10;"/>
        <sourcecode id="u5jz2bgpqWLwO" value="lTimer=tsutil.cTimer((&quot;HIERARCHICAL_FORECAST&quot;))&#10;lForecast_DF=self.internal_forecast(iInputDS,iHorizon)&#10;return lForecast_DF&#10;"/>
        <sourcecode id="ugZKOo2MFrbXG" value="self.mActiveTransformations={&#10;}&#10;&#10;&#10;self.mActivePeriodics={&#10;}&#10;&#10;&#10;self.mActiveTrends={&#10;}&#10;&#10;&#10;self.mActiveAutoRegressions={&#10;}&#10;&#10;&#10;self.mActiveDecompositionTypes={&#10;}&#10;&#10;self.mKnownDecompositionTypes=['T+S+R','TS+R','TSR']&#10;self.mKnownTransformations=['None','Difference','RelativeDifference',&#10;'Integration','BoxCox','Quantization','Logit','Fisher','Anscombe']&#10;self.mKnownTrends=['ConstantTrend',&#10;'Lag1Trend','LinearTrend','PolyTrend','MovingAverage','MovingMedian']&#10;self.mKnownPeriodics=['NoCycle','BestCycle',&#10;'Seasonal_MonthOfYear','Seasonal_Second','Seasonal_Minute','Seasonal_Hour','Seasonal_HourOfWeek','Seasonal_TwoHourOfWeek','Seasonal_ThreeHourOfWeek','Seasonal_FourHourOfWeek','Seasonal_SixHourOfWeek','Seasonal_EightHourOfWeek','Seasonal_TwelveHourOfWeek','Seasonal_DayOfWeek','Seasonal_DayOfMonth','Seasonal_DayOfYear','Seasonal_WeekOfMonth','Seasonal_DayOfNthWeekOfMonth','Seasonal_WeekOfYear']&#10;self.mKnownAutoRegressions=['NoAR',&#10;'AR','ARX','SVR','SVRX','MLP','MLPX','LSTM','LSTMX','XGB','XGBX','CROSTON','LGB','LGBX']&#10;self.set_active_transformations(self.mKnownTransformations[0:4])&#10;&#10;self.set_active_trends(self.mKnownTrends[0:4])&#10;&#10;self.set_active_periodics(self.mKnownPeriodics)&#10;&#10;self.set_active_autoregressions(self.mKnownAutoRegressions[0:3])&#10;&#10;self.set_active_decomposition_types(['T+S+R'])&#10;&#10;"/>
        <sourcecode id="uFxUk2p5U3Iid" value="from.import Utils as tsutil&#10;if(value not in allowed_values):&#10;  raise tsutil.PyAF_Error(&quot;INVALID_MODEL_TYPE Invalid '&quot;+category+&quot;' Type '&quot;+value+&quot;'. Allowed '&quot;+category+&quot;' Values : &quot;+str(allowed_values))&#10;&#10;&#10;"/>
        <sourcecode id="uLD6hOBWADXRk" value="for dec_type in iDecompTypes:&#10;  self.check_model_type_validity('DecompositionType',self.mKnownDecompositionTypes,dec_type)&#10;&#10;self.mActiveDecompositionTypes={&#10;}&#10;&#10;&#10;for decomp_type in self.mKnownDecompositionTypes:&#10;  if(decomp_type in iDecompTypes):&#10;    self.mActiveDecompositionTypes[decomp_type]=True&#10;&#10;&#10;  else:&#10;    self.mActiveDecompositionTypes[decomp_type]=False&#10;&#10;&#10;&#10;if(True not in self.mActiveDecompositionTypes.values()):&#10;  self.mActiveTransformations['T+S+R']=True&#10;&#10;&#10;"/>
        <sourcecode id="ujiQ34n6RyF79" value="for transformation in transformations:&#10;  self.check_model_type_validity('Transformation',self.mKnownTransformations,transformation)&#10;&#10;self.mActiveTransformations={&#10;}&#10;&#10;&#10;for transformation in self.mKnownTransformations:&#10;  if(transformation in transformations):&#10;    self.mActiveTransformations[transformation]=True&#10;&#10;&#10;  else:&#10;    self.mActiveTransformations[transformation]=False&#10;&#10;&#10;&#10;if(True not in self.mActiveTransformations.values()):&#10;  self.mActiveTransformations['None']=True&#10;&#10;&#10;"/>
        <sourcecode id="uSns09GUsxLps" value="for trend in trends:&#10;  self.check_model_type_validity('Trend',self.mKnownTrends,trend)&#10;&#10;self.mActiveTrends={&#10;}&#10;&#10;&#10;for trend in self.mKnownTrends:&#10;  if(trend in trends):&#10;    self.mActiveTrends[trend]=True&#10;&#10;&#10;  else:&#10;    self.mActiveTrends[trend]=False&#10;&#10;&#10;&#10;if(True not in self.mActiveTrends.values()):&#10;  self.mActiveTrends['ConstantTrend']=True&#10;&#10;&#10;"/>
        <sourcecode id="uLm4gbMcMRKps" value="for period in periodics:&#10;  self.check_model_type_validity('Periodic',self.mKnownPeriodics,period)&#10;&#10;self.mActivePeriodics={&#10;}&#10;&#10;&#10;for period in self.mKnownPeriodics:&#10;  if(period in periodics):&#10;    self.mActivePeriodics[period]=True&#10;&#10;&#10;  else:&#10;    self.mActivePeriodics[period]=False&#10;&#10;&#10;&#10;if(True not in self.mActivePeriodics.values()):&#10;  self.mActivePeriodics['NoCycle']=True&#10;&#10;&#10;"/>
        <sourcecode id="u0YLiUIpwWbQ1" value="for autoreg in autoregs:&#10;  self.check_model_type_validity('AutoRegression',self.mKnownAutoRegressions,autoreg)&#10;&#10;self.mActiveAutoRegressions={&#10;}&#10;&#10;&#10;for autoreg in self.mKnownAutoRegressions:&#10;  if(autoreg in autoregs):&#10;    self.mActiveAutoRegressions[autoreg]=True&#10;&#10;&#10;  else:&#10;    self.mActiveAutoRegressions[autoreg]=False&#10;&#10;&#10;&#10;if(True not in self.mActiveAutoRegressions.values()):&#10;  self.mActiveAutoRegressions['NoAR']=True&#10;&#10;&#10;"/>
        <sourcecode id="unALbiXCI8Rz5" value="self.set_active_transformations([])&#10;&#10;"/>
        <sourcecode id="uFyG23gRMwfBu" value="self.set_active_trends([])&#10;&#10;"/>
        <sourcecode id="uXegMMCuaAsaG" value="self.set_active_periodics([])&#10;&#10;"/>
        <sourcecode id="uErPeUWVERL8Z" value="self.set_active_autoregressions([])&#10;&#10;"/>
        <sourcecode id="uNK0T8AhJ9HcT" value="self.mMethod=None&#10;&#10;self.mNbFolds=10&#10;"/>
        <sourcecode id="u92EmlnyY2Y7X" value="self.mMethod=None&#10;&#10;self.mAlpha=0.1&#10;self.mAlphaCriterion=&quot;L2&quot;&#10;self.mZeroRate=0.1&#10;"/>
        <sourcecode id="uVVKlb6T5k6yr" value="self.mSignalMissingDataImputation=None&#10;self.mTimeMissingDataImputation=None&#10;self.mConstant=0.0&#10;"/>
        <sourcecode id="ujSjjlGPMbazi" value="super().__init__()&#10;&#10;self.mParallelMode=True&#10;&#10;self.mNbCores=8&#10;&#10;self.mSeed=1960&#10;self.mEstimRatio=0.8&#10;&#10;self.mCustomSplit=None&#10;self.mAddPredictionIntervals=True&#10;self.mActivateSampling=True&#10;self.mSamplingThreshold=8192&#10;self.enable_fast_mode()&#10;&#10;self.mTimeDeltaComputationMethod=&quot;AVG&quot;&#10;&#10;self.mUserTimeDelta=None&#10;&#10;self.mBusinessDaysOnly=False&#10;&#10;self.mMaxExogenousCategories=5&#10;&#10;self.mNoBoxCoxOrders=[]&#10;&#10;self.mBoxCoxOrders=[-2.0,-1.0,0.0,2.0]&#10;&#10;self.mExtensiveBoxCoxOrders=[-2,-1,-0.5,-0.33,-0.25,0.0,2,0.5,0.33,0.25]&#10;&#10;self.mMaxFeatureForAutoreg=1000&#10;&#10;self.mModelSelection_Criterion=&quot;MASE&quot;&#10;&#10;self.mCycle_Criterion=&quot;MASE&quot;&#10;&#10;self.mCycle_Criterion_Threshold=None&#10;&#10;self.mCycle_Encoding_Scheme=&quot;Target_Median&quot;&#10;&#10;self.mHierarchicalCombinationMethod=&quot;BU&quot;&#10;&#10;self.mForecastRectifier=None&#10;self.mXGBOptions=None&#10;self.mLGBMOptions=None&#10;self.mCrossValidationOptions=cCrossValidationOptions()&#10;self.mCrostonOptions=cCrostonOptions()&#10;self.mMissingDataOptions=cMissingDataOptions()&#10;self.mDL_Backends=(&quot;PyTorch&quot;,)&#10;self.mPytorch_Options=None&#10;self.mKeras_Options=None&#10;self.mVotingMethod=&quot;Condorcet&quot;&#10;self.disableDebuggingOptions()&#10;&#10;"/>
        <sourcecode id="ueMj2hNUFEUN8" value="self.mDebug=False&#10;&#10;self.mDebugCycles=False&#10;&#10;self.mDebugAR=False&#10;&#10;self.mDebugProfile=False&#10;&#10;self.mDebugPerformance=False&#10;&#10;"/>
        <sourcecode id="u3e6WrqHTZF5l" value="self.mQuantiles=[5,10,20]&#10;&#10;self.mMovingAverageLengths=[5,7,12,24,30,60]&#10;&#10;self.mMovingMedianLengths=[5,7,12,24,30,60]&#10;&#10;self.mCycleLengths=None&#10;&#10;self.set_active_transformations(self.mKnownTransformations)&#10;&#10;self.set_active_trends(self.mKnownTrends)&#10;&#10;self.set_active_periodics(self.mKnownPeriodics)&#10;&#10;self.set_active_autoregressions(self.mKnownAutoRegressions)&#10;&#10;self.set_active_decomposition_types(self.mKnownDecompositionTypes)&#10;&#10;self.mMaxAROrder=64&#10;&#10;self.mFilterSeasonals=False&#10;self.mActivateSampling=False&#10;"/>
        <sourcecode id="ubk6nvU8OSllr" value="self.mQuantiles=[5,10,20]&#10;&#10;self.mMovingAverageLengths=[5,7,12,24,30,60]&#10;&#10;self.mMovingMedianLengths=[5,7,12,24,30,60]&#10;&#10;self.mCycleLengths=[5,7,12,24,30,60]&#10;&#10;self.mMaxAROrder=64&#10;&#10;self.mFilterSeasonals=True&#10;"/>
        <sourcecode id="uVr4VlJKXFqcU" value="self.mMaxAROrder=7&#10;&#10;self.set_active_transformations(['None'])&#10;&#10;self.mParallelMode=False&#10;&#10;self.mFilterSeasonals=True&#10;"/>
        <sourcecode id="uuG8XYQ5kjgRF" value="import importlib&#10;spec=importlib.util.find_spec(module_name)&#10;return spec is not None&#10;"/>
        <sourcecode id="uh8kC3o1hj3hl" value="for lBackend in self.mDL_Backends:&#10;  if(lBackend==&quot;PyTorch&quot;):&#10;    if(self.has_module_installed(&quot;torch&quot;)):&#10;      return lBackend&#10;&#10;&#10;  if(lBackend==&quot;Keras&quot;):&#10;    if(self.has_module_installed(&quot;tensorflow&quot;)):&#10;      return lBackend&#10;&#10;&#10;&#10;return None&#10;"/>
        <sourcecode id="uoccwOnS6TLQU" value="lBackend=self.get_available_DL_Backend()&#10;if(lBackend==&quot;PyTorch&quot;):&#10;  from.import Pytorch_Models as tspytorch&#10;  lDict={&#10;  &quot;LSTM&quot;:tspytorch.cLSTM_Model,&quot;MLP&quot;:tspytorch.cMLP_Model}&#10;&#10;  return lDict.get(iModel)&#10;&#10;if(lBackend==&quot;Keras&quot;):&#10;  from.import Keras_Models as tskeras&#10;  lDict={&#10;  &quot;LSTM&quot;:tskeras.cLSTM_Model,&quot;MLP&quot;:tskeras.cMLP_Model}&#10;&#10;  return lDict.get(iModel)&#10;&#10;return None&#10;"/>
        <sourcecode id="uBDHNFsyMb5Ux" value="return self.has_module_installed('torch')or self.has_module_installed('tensorflow')&#10;"/>
        <sourcecode id="u6CYjWLd40ulA" value="return self.has_module_installed('xgboost')&#10;"/>
        <sourcecode id="uQyglkN5nZW8p" value="return self.has_module_installed('lightgbm')"/>
      </codegenerator>
    </codegeneration>
  </xmi:Extension>
</xmi:XMI>
