INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['msales'], 'Horizons': {'msales': 2}}
INFO:pyaf.std:TRAINING_ENGINE_END 1.906
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1.0 TimeMax=3.16666666666667 TimeDelta=0.08333333333333347 Horizon=2
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='msales' Length=36  Min=0 Max=1  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='CumSum_msales' Min=1.0 Max=17.0  Mean=5.972222 StdDev=5.008249
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'CumSum_'
INFO:pyaf.std:BEST_DECOMPOSITION  'CumSum_msales_PolyTrend_residue_Cycle_None_residue_NoAR' [PolyTrend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL 'CumSum_msales_PolyTrend' [PolyTrend]
INFO:pyaf.std:CYCLE_DETAIL 'CumSum_msales_PolyTrend_residue_Cycle_None' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL 'CumSum_msales_PolyTrend_residue_Cycle_None_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(1829232921.3296), 'RMSE': np.float64(0.4163), 'MAE': np.float64(0.3256), 'MASE': np.float64(0.9405)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(1496297900.3281), 'RMSE': np.float64(0.412), 'MAE': np.float64(0.239), 'MASE': np.float64(0.7171)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.2915), 'RMSE': np.float64(0.2928), 'MAE': np.float64(0.2915), 'MASE': np.float64(2914550966.2749)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=2 {'MAPE': np.float64(1829232921.3296), 'RMSE': np.float64(0.4163), 'MAE': np.float64(0.3256), 'MASE': np.float64(0.9405)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=2 {'MAPE': np.float64(1496297900.3281), 'RMSE': np.float64(0.412), 'MAE': np.float64(0.239), 'MASE': np.float64(0.7171)}
INFO:pyaf.std:MODEL_PERFS Test STEP=2 {'MAPE': np.float64(0.2915), 'RMSE': np.float64(0.2928), 'MAE': np.float64(0.2915), 'MASE': np.float64(2914550966.2749)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'M', 'Trend': 'M', 'Cycle': 'S', 'AR': 'S'} [MMSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES Integration None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:POLYNOMIAL_RIDGE_TREND PolyTrend (np.float64(1.146141), array([-2.432257,  8.517241,  2.676373]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES CumSum_msales_PolyTrend_residue_Cycle_None None -0.010661 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'msales'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 0 {'Transformation': 'CumSum_msales', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_msales_PolyTrend_residue_Cycle_None_residue_NoAR', 'Voting': 94.5, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 0.7171, 'Forecast_MASE_2': 0.7171}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 1 {'Transformation': 'CumSum_msales', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_msales_PolyTrend_residue_zeroCycle[0.0]_residue_NoAR', 'Voting': 94.5, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 0.7171, 'Forecast_MASE_2': 0.7171}
INFO:pyaf.std:COMPETITION_DETAIL_END 'msales'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_msales.csv_2_msales_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_msales.csv_2_msales_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_msales.csv_2_msales_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_msales.csv_2_msales_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_msales.csv_2_msales_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_msales.csv_2_msales_prediction_intervals_output.png')
/home/runner/work/pyaf/pyaf/pyaf/TS/Plots.py:35: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all Axes decorations.
  fig.tight_layout()
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_msales.csv_2_msales_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['msales'], 'Horizons': {'msales': 4}}
PERFORMANCE MAPE_FORECAST msales 1496297900.3281
INFO:pyaf.std:TRAINING_ENGINE_END 3.106
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1.0 TimeMax=3.0 TimeDelta=0.08333333333333333 Horizon=4
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='msales' Length=36  Min=0 Max=1  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_msales' Min=0.0 Max=1.0  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_msales_LinearTrend_residue_Cycle_None_residue_NoAR' [LinearTrend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_msales_LinearTrend' [LinearTrend]
INFO:pyaf.std:CYCLE_DETAIL '_msales_LinearTrend_residue_Cycle_None' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_msales_LinearTrend_residue_Cycle_None_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(1811692307.8735), 'RMSE': np.float64(0.4256), 'MAE': np.float64(0.3623), 'MASE': np.float64(1.087)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(3520879120.9503), 'RMSE': np.float64(0.5488), 'MAE': np.float64(0.4233), 'MASE': np.float64(0.8466)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.0338), 'RMSE': np.float64(0.0406), 'MAE': np.float64(0.0338), 'MASE': np.float64(338461538.4615)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=4 {'MAPE': np.float64(1811692307.8735), 'RMSE': np.float64(0.4256), 'MAE': np.float64(0.3623), 'MASE': np.float64(1.087)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=4 {'MAPE': np.float64(3520879120.9503), 'RMSE': np.float64(0.5488), 'MAE': np.float64(0.4233), 'MASE': np.float64(0.8466)}
INFO:pyaf.std:MODEL_PERFS Test STEP=4 {'MAPE': np.float64(0.0338), 'RMSE': np.float64(0.0406), 'MAE': np.float64(0.0338), 'MASE': np.float64(338461538.4615)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LINEAR_RIDGE_TREND LinearTrend (np.float64(-0.009231), array([0.738462]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _msales_LinearTrend_residue_Cycle_None None -0.113846 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'msales'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 0 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_LinearTrend_residue_Cycle_None_residue_NoAR', 'Voting': 148.0, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.8466, 'Forecast_MASE_2': 0.8466, 'Forecast_MASE_3': 0.8466, 'Forecast_MASE_4': 0.8466}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 1 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_LinearTrend_residue_zeroCycle[0.0]_residue_NoAR', 'Voting': 148.0, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.8466, 'Forecast_MASE_2': 0.8466, 'Forecast_MASE_3': 0.8466, 'Forecast_MASE_4': 0.8466}
INFO:pyaf.std:COMPETITION_DETAIL_END 'msales'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_msales.csv_4_msales_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_msales.csv_4_msales_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_msales.csv_4_msales_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_msales.csv_4_msales_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_msales.csv_4_msales_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_msales.csv_4_msales_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_msales.csv_4_msales_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['msales'], 'Horizons': {'msales': 8}}
PERFORMANCE MAPE_FORECAST msales 3520879120.9503
INFO:pyaf.std:TRAINING_ENGINE_END 6.047
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1.0 TimeMax=3.91666666666667 TimeDelta=0.08333333333333343 Horizon=8
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='msales' Length=36  Min=0 Max=1  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_msales' Min=0.0 Max=1.0  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_msales_PolyTrend_residue_Cycle_5_residue_NoAR' [PolyTrend + Cycle_5 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_msales_PolyTrend' [PolyTrend]
INFO:pyaf.std:CYCLE_DETAIL '_msales_PolyTrend_residue_Cycle_5' [Cycle_5]
INFO:pyaf.std:AUTOREG_DETAIL '_msales_PolyTrend_residue_Cycle_5_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=8 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=8 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Test STEP=8 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'M', 'Cycle': 'S', 'AR': 'S'} [MSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:POLYNOMIAL_RIDGE_TREND PolyTrend (np.float64(0.314489), array([-2.026054,  6.24262 , -3.654931]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _msales_PolyTrend_residue_Cycle_5 5 -0.130976 {0: np.float64(-0.150884), 1: np.float64(-0.180884), 2: np.float64(0.112931), 3: np.float64(0.182403), 4: np.float64(-0.144136)}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'msales'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 0 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_PolyTrend_residue_Cycle_5_residue_NoAR', 'Voting': 282.25, 'Complexity': 'MSSSS', 'Forecast_MASE_1': 0.875, 'Forecast_MASE_2': 0.875, 'Forecast_MASE_3': 0.875, 'Forecast_MASE_4': 0.875, 'Forecast_MASE_5': 0.875, 'Forecast_MASE_6': 0.875, 'Forecast_MASE_7': 0.875, 'Forecast_MASE_8': 0.875}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 1 {'Transformation': 'CumSum_msales', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_msales_PolyTrend_residue_Cycle_5_residue_NoAR', 'Voting': 282.25, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 0.8804, 'Forecast_MASE_2': 0.8804, 'Forecast_MASE_3': 0.8804, 'Forecast_MASE_4': 0.8804, 'Forecast_MASE_5': 0.8804, 'Forecast_MASE_6': 0.8804, 'Forecast_MASE_7': 0.8804, 'Forecast_MASE_8': 0.8804}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 2 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_PolyTrend_residue_Cycle_5_residue_AR(9)', 'Voting': 280.875, 'Complexity': 'LMSSS', 'Forecast_MASE_1': 0.8464, 'Forecast_MASE_2': 0.8852, 'Forecast_MASE_3': 0.8923, 'Forecast_MASE_4': 0.8755, 'Forecast_MASE_5': 0.8852, 'Forecast_MASE_6': 0.8761, 'Forecast_MASE_7': 0.8821, 'Forecast_MASE_8': 0.879}
INFO:pyaf.std:COMPETITION_DETAIL_END 'msales'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_msales.csv_8_msales_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_msales.csv_8_msales_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_msales.csv_8_msales_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_msales.csv_8_msales_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_msales.csv_8_msales_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_msales.csv_8_msales_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_msales.csv_8_msales_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['msales'], 'Horizons': {'msales': 12}}
PERFORMANCE MAPE_FORECAST msales 1299324209.711
INFO:pyaf.std:TRAINING_ENGINE_END 8.211
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1.0 TimeMax=3.91666666666667 TimeDelta=0.08333333333333343 Horizon=12
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='msales' Length=36  Min=0 Max=1  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_msales' Min=0.0 Max=1.0  Mean=0.472222 StdDev=0.499228
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_msales_PolyTrend_residue_Cycle_5_residue_NoAR' [PolyTrend + Cycle_5 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_msales_PolyTrend' [PolyTrend]
INFO:pyaf.std:CYCLE_DETAIL '_msales_PolyTrend_residue_Cycle_5' [Cycle_5]
INFO:pyaf.std:AUTOREG_DETAIL '_msales_PolyTrend_residue_Cycle_5_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=12 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=12 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_PERFS Test STEP=12 {'MAPE': np.float64(1299324209.711), 'RMSE': np.float64(0.3867), 'MAE': np.float64(0.3), 'MASE': np.float64(0.875)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'M', 'Cycle': 'S', 'AR': 'S'} [MSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:POLYNOMIAL_RIDGE_TREND PolyTrend (np.float64(0.314489), array([-2.026054,  6.24262 , -3.654931]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _msales_PolyTrend_residue_Cycle_5 5 -0.130976 {0: np.float64(-0.150884), 1: np.float64(-0.180884), 2: np.float64(0.112931), 3: np.float64(0.182403), 4: np.float64(-0.144136)}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'msales'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 0 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_PolyTrend_residue_Cycle_5_residue_NoAR', 'Voting': 406.8333, 'Complexity': 'MSSSS', 'Forecast_MASE_1': 0.875, 'Forecast_MASE_2': 0.875, 'Forecast_MASE_3': 0.875, 'Forecast_MASE_4': 0.875, 'Forecast_MASE_5': 0.875, 'Forecast_MASE_6': 0.875, 'Forecast_MASE_7': 0.875, 'Forecast_MASE_8': 0.875, 'Forecast_MASE_9': 0.875, 'Forecast_MASE_10': 0.875, 'Forecast_MASE_11': 0.875, 'Forecast_MASE_12': 0.875}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 1 {'Transformation': 'CumSum_msales', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_msales_PolyTrend_residue_Cycle_5_residue_NoAR', 'Voting': 406.8333, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 0.8804, 'Forecast_MASE_2': 0.8804, 'Forecast_MASE_3': 0.8804, 'Forecast_MASE_4': 0.8804, 'Forecast_MASE_5': 0.8804, 'Forecast_MASE_6': 0.8804, 'Forecast_MASE_7': 0.8804, 'Forecast_MASE_8': 0.8804, 'Forecast_MASE_9': 0.8804, 'Forecast_MASE_10': 0.8804, 'Forecast_MASE_11': 0.8804, 'Forecast_MASE_12': 0.8804}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'msales' 2 {'Transformation': '_msales', 'DecompositionType': 'T+S+R', 'Model': '_msales_PolyTrend_residue_Cycle_5_residue_AR(9)', 'Voting': 405.9167, 'Complexity': 'LMSSS', 'Forecast_MASE_1': 0.8464, 'Forecast_MASE_2': 0.8852, 'Forecast_MASE_3': 0.8923, 'Forecast_MASE_4': 0.8755, 'Forecast_MASE_5': 0.8852, 'Forecast_MASE_6': 0.8761, 'Forecast_MASE_7': 0.8821, 'Forecast_MASE_8': 0.879, 'Forecast_MASE_9': 0.8803, 'Forecast_MASE_10': 0.8799, 'Forecast_MASE_11': 0.88, 'Forecast_MASE_12': 0.88}
INFO:pyaf.std:COMPETITION_DETAIL_END 'msales'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_msales.csv_12_msales_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_msales.csv_12_msales_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_msales.csv_12_msales_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_msales.csv_12_msales_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_msales.csv_12_msales_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_msales.csv_12_msales_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_msales.csv_12_msales_quantiles_output.png')
PERFORMANCE MAPE_FORECAST msales 1299324209.711
EXECUTION_TIME_DETAIL = {'CMD':'timeout 480 python tests/expsmooth/expsmooth_dataset_msales.py', 'ElapsedTimeSecs':(62.31, 1.05, 30.78), 'MAX_MEM_KB':242952, 'CPU_PRCNT':'51%', 'FILES_IN':8, 'FILES_OUT':5576, 'EXIT_STATUS':0}
