INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['gasprice'], 'Horizons': {'gasprice': 2}}
INFO:pyaf.std:TRAINING_ENGINE_END 2.194
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1991.0 TimeMax=2003.5 TimeDelta=0.08333333333333333 Horizon=2
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='gasprice' Length=191  Min=11.35 Max=74.41  Mean=27.948377 StdDev=14.349022
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_gasprice' Min=0.0 Max=1.0  Mean=0.263216 StdDev=0.227546
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [Lag1Trend + Cycle_5 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_gasprice_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5' [Cycle_5]
INFO:pyaf.std:AUTOREG_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(0.0564), 'RMSE': np.float64(1.6368), 'MAE': np.float64(1.2293), 'MASE': np.float64(0.9747)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(0.0589), 'RMSE': np.float64(3.7724), 'MAE': np.float64(3.0079), 'MASE': np.float64(0.9618)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.0441), 'RMSE': np.float64(3.5452), 'MAE': np.float64(2.6), 'MASE': np.float64(13.6842)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=2 {'MAPE': np.float64(0.0849), 'RMSE': np.float64(2.4666), 'MAE': np.float64(1.8258), 'MASE': np.float64(1.4476)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=2 {'MAPE': np.float64(0.0824), 'RMSE': np.float64(5.1343), 'MAE': np.float64(4.2864), 'MASE': np.float64(1.3707)}
INFO:pyaf.std:MODEL_PERFS Test STEP=2 {'MAPE': np.float64(0.1645), 'RMSE': np.float64(10.855), 'MAE': np.float64(9.6975), 'MASE': np.float64(51.0395)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.220108
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _gasprice_Lag1Trend_residue_Cycle_5 5 0.003172 {0: np.float64(0.0), 1: np.float64(0.003727), 2: np.float64(-0.003251), 3: np.float64(0.005154), 4: np.float64(0.001586)}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'gasprice'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'gasprice' 0 {'Transformation': '_gasprice', 'DecompositionType': 'T+S+R', 'Model': '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR', 'Voting': 93.5, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.9618, 'Forecast_MASE_2': 1.3707}
INFO:pyaf.std:COMPETITION_DETAIL_END 'gasprice'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_gasprice.csv_2_gasprice_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_gasprice.csv_2_gasprice_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_gasprice.csv_2_gasprice_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_gasprice.csv_2_gasprice_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_gasprice.csv_2_gasprice_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_gasprice.csv_2_gasprice_prediction_intervals_output.png')
/home/runner/work/pyaf/pyaf/pyaf/TS/Plots.py:35: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all Axes decorations.
  fig.tight_layout()
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_gasprice.csv_2_gasprice_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['gasprice'], 'Horizons': {'gasprice': 4}}
PERFORMANCE MAPE_FORECAST gasprice 0.0824
INFO:pyaf.std:TRAINING_ENGINE_END 3.758
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1991.0 TimeMax=2003.33333333333 TimeDelta=0.08333333333331132 Horizon=4
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='gasprice' Length=191  Min=11.35 Max=74.41  Mean=27.948377 StdDev=14.349022
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_gasprice' Min=0.0 Max=1.0  Mean=0.263216 StdDev=0.227546
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [Lag1Trend + Cycle_5 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_gasprice_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5' [Cycle_5]
INFO:pyaf.std:AUTOREG_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(0.0564), 'RMSE': np.float64(1.6339), 'MAE': np.float64(1.2274), 'MASE': np.float64(0.9739)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(0.0575), 'RMSE': np.float64(3.4753), 'MAE': np.float64(2.8308), 'MASE': np.float64(0.988)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.0628), 'RMSE': np.float64(5.388), 'MAE': np.float64(3.9387), 'MASE': np.float64(0.824)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=4 {'MAPE': np.float64(0.1279), 'RMSE': np.float64(3.2957), 'MAE': np.float64(2.6993), 'MASE': np.float64(2.1416)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=4 {'MAPE': np.float64(0.104), 'RMSE': np.float64(6.5435), 'MAE': np.float64(5.2709), 'MASE': np.float64(1.8397)}
INFO:pyaf.std:MODEL_PERFS Test STEP=4 {'MAPE': np.float64(0.1588), 'RMSE': np.float64(10.6694), 'MAE': np.float64(9.6812), 'MASE': np.float64(2.0254)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.220108
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _gasprice_Lag1Trend_residue_Cycle_5 5 0.003172 {0: np.float64(-0.000238), 1: np.float64(0.003727), 2: np.float64(-0.003251), 3: np.float64(0.005154), 4: np.float64(-0.001427)}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'gasprice'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'gasprice' 0 {'Transformation': '_gasprice', 'DecompositionType': 'T+S+R', 'Model': '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR', 'Voting': 157.5, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.988, 'Forecast_MASE_2': 1.4475, 'Forecast_MASE_3': 1.6546, 'Forecast_MASE_4': 1.8397}
INFO:pyaf.std:COMPETITION_DETAIL_END 'gasprice'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_gasprice.csv_4_gasprice_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_gasprice.csv_4_gasprice_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_gasprice.csv_4_gasprice_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_gasprice.csv_4_gasprice_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_gasprice.csv_4_gasprice_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_gasprice.csv_4_gasprice_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_gasprice.csv_4_gasprice_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['gasprice'], 'Horizons': {'gasprice': 8}}
PERFORMANCE MAPE_FORECAST gasprice 0.104
INFO:pyaf.std:TRAINING_ENGINE_END 6.584
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1991.0 TimeMax=2003.08333333333 TimeDelta=0.08333333333331086 Horizon=8
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='gasprice' Length=191  Min=11.35 Max=74.41  Mean=27.948377 StdDev=14.349022
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_gasprice' Min=0.0 Max=1.0  Mean=0.263216 StdDev=0.227546
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [Lag1Trend + Cycle_5 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_gasprice_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5' [Cycle_5]
INFO:pyaf.std:AUTOREG_DETAIL '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(0.0557), 'RMSE': np.float64(1.5794), 'MAE': np.float64(1.1965), 'MASE': np.float64(0.9702)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(0.0621), 'RMSE': np.float64(3.4396), 'MAE': np.float64(2.8177), 'MASE': np.float64(0.9921)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.0513), 'RMSE': np.float64(4.6178), 'MAE': np.float64(3.3825), 'MASE': np.float64(1.1449)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=8 {'MAPE': np.float64(0.1783), 'RMSE': np.float64(4.5803), 'MAE': np.float64(3.7465), 'MASE': np.float64(3.0379)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=8 {'MAPE': np.float64(0.158), 'RMSE': np.float64(8.9812), 'MAE': np.float64(7.4273), 'MASE': np.float64(2.6152)}
INFO:pyaf.std:MODEL_PERFS Test STEP=8 {'MAPE': np.float64(0.0987), 'RMSE': np.float64(8.3047), 'MAE': np.float64(6.9), 'MASE': np.float64(2.3356)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.220108
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _gasprice_Lag1Trend_residue_Cycle_5 5 0.003409 {0: np.float64(-0.000238), 1: np.float64(0.003806), 2: np.float64(-0.002537), 3: np.float64(0.006343), 4: np.float64(-0.001427)}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'gasprice'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'gasprice' 0 {'Transformation': '_gasprice', 'DecompositionType': 'T+S+R', 'Model': '_gasprice_Lag1Trend_residue_Cycle_5_residue_NoAR', 'Voting': 281.625, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.9921, 'Forecast_MASE_2': 1.4321, 'Forecast_MASE_3': 1.626, 'Forecast_MASE_4': 1.6827, 'Forecast_MASE_5': 1.653, 'Forecast_MASE_6': 2.0328, 'Forecast_MASE_7': 2.3968, 'Forecast_MASE_8': 2.6152}
INFO:pyaf.std:COMPETITION_DETAIL_END 'gasprice'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_gasprice.csv_8_gasprice_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_gasprice.csv_8_gasprice_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_gasprice.csv_8_gasprice_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_gasprice.csv_8_gasprice_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_gasprice.csv_8_gasprice_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_gasprice.csv_8_gasprice_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_gasprice.csv_8_gasprice_quantiles_output.png')
INFO:pyaf.std:TRAINING_ENGINE_START {'Signals': ['gasprice'], 'Horizons': {'gasprice': 12}}
PERFORMANCE MAPE_FORECAST gasprice 0.158
INFO:pyaf.std:TRAINING_ENGINE_END 7.566
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=1991.0 TimeMax=2002.83333333333 TimeDelta=0.08333333333331039 Horizon=12
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='gasprice' Length=191  Min=11.35 Max=74.41  Mean=27.948377 StdDev=14.349022
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='CumSum_gasprice' Min=0.220108 Max=50.274183  Mean=15.812617 StdDev=12.238243
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'CumSum_'
INFO:pyaf.std:BEST_DECOMPOSITION  'CumSum_gasprice_PolyTrend_residue_Cycle_None_residue_NoAR' [PolyTrend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL 'CumSum_gasprice_PolyTrend' [PolyTrend]
INFO:pyaf.std:CYCLE_DETAIL 'CumSum_gasprice_PolyTrend_residue_Cycle_None' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL 'CumSum_gasprice_PolyTrend_residue_Cycle_None_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': np.float64(0.1436), 'RMSE': np.float64(3.8156), 'MAE': np.float64(2.8325), 'MASE': np.float64(2.3752)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': np.float64(0.1508), 'RMSE': np.float64(9.8805), 'MAE': np.float64(7.3416), 'MASE': np.float64(2.5997)}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': np.float64(0.303), 'RMSE': np.float64(21.0073), 'MAE': np.float64(20.2488), 'MASE': np.float64(5.7959)}
INFO:pyaf.std:MODEL_PERFS Fit STEP=12 {'MAPE': np.float64(0.1436), 'RMSE': np.float64(3.8156), 'MAE': np.float64(2.8325), 'MASE': np.float64(2.3752)}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=12 {'MAPE': np.float64(0.1508), 'RMSE': np.float64(9.8805), 'MAE': np.float64(7.3416), 'MASE': np.float64(2.5997)}
INFO:pyaf.std:MODEL_PERFS Test STEP=12 {'MAPE': np.float64(0.303), 'RMSE': np.float64(21.0073), 'MAE': np.float64(20.2488), 'MASE': np.float64(5.7959)}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'M', 'Trend': 'M', 'Cycle': 'S', 'AR': 'S'} [MMSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES Integration None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:POLYNOMIAL_RIDGE_TREND PolyTrend (np.float64(0.081015), array([ 25.509038, -27.134362,  24.179808]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES CumSum_gasprice_PolyTrend_residue_Cycle_None None -0.002484 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:COMPETITION_DETAIL_START 'gasprice'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'gasprice' 0 {'Transformation': 'CumSum_gasprice', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_gasprice_PolyTrend_residue_Cycle_None_residue_NoAR', 'Voting': 387.1667, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 2.5997, 'Forecast_MASE_2': 2.5997, 'Forecast_MASE_3': 2.5997, 'Forecast_MASE_4': 2.5997, 'Forecast_MASE_5': 2.5997, 'Forecast_MASE_6': 2.5997, 'Forecast_MASE_7': 2.5997, 'Forecast_MASE_8': 2.5997, 'Forecast_MASE_9': 2.5997, 'Forecast_MASE_10': 2.5997, 'Forecast_MASE_11': 2.5997, 'Forecast_MASE_12': 2.5997}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'gasprice' 1 {'Transformation': 'CumSum_gasprice', 'DecompositionType': 'T+S+R', 'Model': 'CumSum_gasprice_PolyTrend_residue_zeroCycle[0.0]_residue_NoAR', 'Voting': 387.1667, 'Complexity': 'MMSSS', 'Forecast_MASE_1': 2.5997, 'Forecast_MASE_2': 2.5997, 'Forecast_MASE_3': 2.5997, 'Forecast_MASE_4': 2.5997, 'Forecast_MASE_5': 2.5997, 'Forecast_MASE_6': 2.5997, 'Forecast_MASE_7': 2.5997, 'Forecast_MASE_8': 2.5997, 'Forecast_MASE_9': 2.5997, 'Forecast_MASE_10': 2.5997, 'Forecast_MASE_11': 2.5997, 'Forecast_MASE_12': 2.5997}
INFO:pyaf.std:COMPETITION_DETAIL_END 'gasprice'
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/expsmooth_gasprice.csv_12_gasprice_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/expsmooth_gasprice.csv_12_gasprice_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/expsmooth_gasprice.csv_12_gasprice_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/expsmooth_gasprice.csv_12_gasprice_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/expsmooth_gasprice.csv_12_gasprice_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/expsmooth_gasprice.csv_12_gasprice_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/expsmooth_gasprice.csv_12_gasprice_quantiles_output.png')
PERFORMANCE MAPE_FORECAST gasprice 0.1508
EXECUTION_TIME_DETAIL = {'CMD':'timeout 480 python tests/expsmooth/expsmooth_dataset_gasprice.py', 'ElapsedTimeSecs':(61.30, 1.09, 31.52), 'MAX_MEM_KB':246884, 'CPU_PRCNT':'53%', 'FILES_IN':8, 'FILES_OUT':6096, 'EXIT_STATUS':0}
